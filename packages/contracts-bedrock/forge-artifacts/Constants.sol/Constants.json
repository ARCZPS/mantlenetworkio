{
  "abi": [],
  "bytecode": {
    "object": "0x602d6037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea164736f6c634300080f000a",
    "sourceMap": "336:1005:39:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;336:1005:39;;;;;;;;;;;;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x73000000000000000000000000000000000000000030146080604052600080fdfea164736f6c634300080f000a",
    "sourceMap": "336:1005:39:-:0;;;;;;;;",
    "linkReferences": {}
  },
  "methodIdentifiers": {},
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"Constants\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Constants is a library for storing constants. Simple! Don't put everything in here, just         the stuff used in multiple contracts. Constants that only apply to a single contract         should be defined in that contract instead.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/Constants.sol\":\"Constants\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[\":@openzeppelin/=node_modules/@openzeppelin/\",\":@openzeppelin/contracts-upgradeable/=node_modules/@openzeppelin/contracts-upgradeable/\",\":@openzeppelin/contracts/=node_modules/@openzeppelin/contracts/\",\":@rari-capital/=node_modules/@rari-capital/\",\":@rari-capital/solmate/=node_modules/@rari-capital/solmate/\",\":ds-test/=node_modules/ds-test/src/\",\":forge-std/=node_modules/forge-std/src/\"]},\"sources\":{\"contracts/libraries/Constants.sol\":{\"keccak256\":\"0x09a0d1616d822d77142123e6d1262be7ee71ee840e6022f75a4aa0c508659a99\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7bfbb81c230c0032a4d1c3e37b32708e82523c53b7b3b0df5558335c5c0949ee\",\"dweb:/ipfs/QmcRoHQTRxEbbngT1o9yPC5FfQiqqH8P1nTAB7RzgQbKVj\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.15+commit.e14f2714"
    },
    "language": "Solidity",
    "output": {
      "abi": [],
      "devdoc": {
        "kind": "dev",
        "methods": {},
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        ":@openzeppelin/=node_modules/@openzeppelin/",
        ":@openzeppelin/contracts-upgradeable/=node_modules/@openzeppelin/contracts-upgradeable/",
        ":@openzeppelin/contracts/=node_modules/@openzeppelin/contracts/",
        ":@rari-capital/=node_modules/@rari-capital/",
        ":@rari-capital/solmate/=node_modules/@rari-capital/solmate/",
        ":ds-test/=node_modules/ds-test/src/",
        ":forge-std/=node_modules/forge-std/src/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 999999
      },
      "metadata": {
        "bytecodeHash": "none"
      },
      "compilationTarget": {
        "contracts/libraries/Constants.sol": "Constants"
      },
      "libraries": {}
    },
    "sources": {
      "contracts/libraries/Constants.sol": {
        "keccak256": "0x09a0d1616d822d77142123e6d1262be7ee71ee840e6022f75a4aa0c508659a99",
        "urls": [
          "bzz-raw://7bfbb81c230c0032a4d1c3e37b32708e82523c53b7b3b0df5558335c5c0949ee",
          "dweb:/ipfs/QmcRoHQTRxEbbngT1o9yPC5FfQiqqH8P1nTAB7RzgQbKVj"
        ],
        "license": "MIT"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": {}
  },
  "userdoc": {
    "version": 1,
    "kind": "user",
    "notice": "Constants is a library for storing constants. Simple! Don't put everything in here, just         the stuff used in multiple contracts. Constants that only apply to a single contract         should be defined in that contract instead."
  },
  "devdoc": {
    "version": 1,
    "kind": "dev",
    "title": "Constants"
  },
  "ast": {
    "absolutePath": "contracts/libraries/Constants.sol",
    "id": 7222,
    "exportedSymbols": {
      "Constants": [
        7221
      ]
    },
    "nodeType": "SourceUnit",
    "src": "32:1310:39",
    "nodes": [
      {
        "id": 7208,
        "nodeType": "PragmaDirective",
        "src": "32:23:39",
        "nodes": [],
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ]
      },
      {
        "id": 7221,
        "nodeType": "ContractDefinition",
        "src": "336:1005:39",
        "nodes": [
          {
            "id": 7216,
            "nodeType": "VariableDeclaration",
            "src": "908:57:39",
            "nodes": [],
            "constant": true,
            "documentation": {
              "id": 7210,
              "nodeType": "StructuredDocumentation",
              "src": "360:543:39",
              "text": " @notice Special address to be used as the tx origin for gas estimation calls in the\n         MantlePortal and CrossDomainMessenger calls. You only need to use this address if\n         the minimum gas limit specified by the user is not actually enough to execute the\n         given message and you're attempting to estimate the actual necessary gas limit. We\n         use address(1) because it's the ecrecover precompile and therefore guaranteed to\n         never have any code on any EVM chain."
            },
            "mutability": "constant",
            "name": "ESTIMATION_ADDRESS",
            "nameLocation": "934:18:39",
            "scope": 7221,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 7211,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "908:7:39",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "value": {
              "arguments": [
                {
                  "hexValue": "31",
                  "id": 7214,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "number",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "963:1:39",
                  "typeDescriptions": {
                    "typeIdentifier": "t_rational_1_by_1",
                    "typeString": "int_const 1"
                  },
                  "value": "1"
                }
              ],
              "expression": {
                "argumentTypes": [
                  {
                    "typeIdentifier": "t_rational_1_by_1",
                    "typeString": "int_const 1"
                  }
                ],
                "id": 7213,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "lValueRequested": false,
                "nodeType": "ElementaryTypeNameExpression",
                "src": "955:7:39",
                "typeDescriptions": {
                  "typeIdentifier": "t_type$_t_address_$",
                  "typeString": "type(address)"
                },
                "typeName": {
                  "id": 7212,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "955:7:39",
                  "typeDescriptions": {}
                }
              },
              "id": 7215,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "typeConversion",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "955:10:39",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "internal"
          },
          {
            "id": 7220,
            "nodeType": "VariableDeclaration",
            "src": "1250:88:39",
            "nodes": [],
            "constant": true,
            "documentation": {
              "id": 7217,
              "nodeType": "StructuredDocumentation",
              "src": "972:273:39",
              "text": " @notice Value used for the L2 sender storage slot in both the MantlePortal and the\n         CrossDomainMessenger contracts before an actual sender is set. This value is\n         non-zero to reduce the gas cost of message passing transactions."
            },
            "mutability": "constant",
            "name": "DEFAULT_L2_SENDER",
            "nameLocation": "1276:17:39",
            "scope": 7221,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 7218,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "1250:7:39",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "value": {
              "hexValue": "307830303030303030303030303030303030303030303030303030303030303030303030303064456144",
              "id": 7219,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "1296:42:39",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              },
              "value": "0x000000000000000000000000000000000000dEaD"
            },
            "visibility": "internal"
          }
        ],
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "Constants",
        "contractDependencies": [],
        "contractKind": "library",
        "documentation": {
          "id": 7209,
          "nodeType": "StructuredDocumentation",
          "src": "57:278:39",
          "text": " @title Constants\n @notice Constants is a library for storing constants. Simple! Don't put everything in here, just\n         the stuff used in multiple contracts. Constants that only apply to a single contract\n         should be defined in that contract instead."
        },
        "fullyImplemented": true,
        "linearizedBaseContracts": [
          7221
        ],
        "name": "Constants",
        "nameLocation": "344:9:39",
        "scope": 7222,
        "usedErrors": []
      }
    ],
    "license": "MIT"
  },
  "id": 39
}