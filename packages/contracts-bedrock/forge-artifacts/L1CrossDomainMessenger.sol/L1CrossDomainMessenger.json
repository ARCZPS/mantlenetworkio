{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract MantlePortal",
          "name": "_portal",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "msgHash",
          "type": "bytes32"
        }
      ],
      "name": "FailedRelayedMessage",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "msgHash",
          "type": "bytes32"
        }
      ],
      "name": "RelayedMessage",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "message",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "messageNonce",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gasLimit",
          "type": "uint256"
        }
      ],
      "name": "SentMessage",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "SentMessageExtension1",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MESSAGE_VERSION",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_GAS_CALLDATA_OVERHEAD",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_GAS_CONSTANT_OVERHEAD",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_GAS_DYNAMIC_OVERHEAD_DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_GAS_DYNAMIC_OVERHEAD_NUMERATOR",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OTHER_MESSENGER",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PORTAL",
      "outputs": [
        {
          "internalType": "contract MantlePortal",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        },
        {
          "internalType": "uint32",
          "name": "_minGasLimit",
          "type": "uint32"
        }
      ],
      "name": "baseGas",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "failedMessages",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "messageNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_nonce",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_target",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minGasLimit",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        }
      ],
      "name": "relayMessage",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_target",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        },
        {
          "internalType": "uint32",
          "name": "_minGasLimit",
          "type": "uint32"
        }
      ],
      "name": "sendMessage",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "successfulMessages",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "xDomainMessageSender",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x6101206040523480156200001257600080fd5b506040516200228a3803806200228a83398101604081905262000035916200025c565b734200000000000000000000000000000000000007608052600160a081905260c052600060e0526001600160a01b03811661010052620000746200007b565b506200028e565b600054600160a81b900460ff1615808015620000a457506000546001600160a01b90910460ff16105b80620000db5750620000c130620001c860201b620012811760201c565b158015620000db5750600054600160a01b900460ff166001145b620001445760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff60a01b1916600160a01b179055801562000172576000805460ff60a81b1916600160a81b1790555b6200017c620001d7565b8015620001c5576000805460ff60a81b19169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50565b6001600160a01b03163b151590565b600054600160a81b900460ff16620002465760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016200013b565b60cc80546001600160a01b03191661dead179055565b6000602082840312156200026f57600080fd5b81516001600160a01b03811681146200028757600080fd5b9392505050565b60805160a05160c05160e05161010051611f8d620002fd60003960008181610153015281816112da015281816115bc0152818161161d01526116e90152600061064901526000610620015260006105f70152600081816102620152818161039101526115e60152611f8d6000f3fe6080604052600436106100f35760003560e01c80637dea7cc31161008a578063b1b1b20911610059578063b1b1b209146102c4578063b28ade25146102f4578063d764ad0b14610314578063ecc704281461032757600080fd5b80637dea7cc3146102245780638129fc1c1461023b5780639fce812c14610250578063a4e7f8bd1461028457600080fd5b80633dbb202b116100c65780633dbb202b146101b05780633f827a5a146101c557806354fd4d50146101ed5780636e296e451461020f57600080fd5b8063028f85f7146100f85780630c5684981461012b5780630ff754ea146101415780632828d7e81461019a575b600080fd5b34801561010457600080fd5b5061010d601081565b60405167ffffffffffffffff90911681526020015b60405180910390f35b34801561013757600080fd5b5061010d6103e881565b34801561014d57600080fd5b506101757f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610122565b3480156101a657600080fd5b5061010d6103f881565b6101c36101be366004611913565b61038c565b005b3480156101d157600080fd5b506101da600181565b60405161ffff9091168152602001610122565b3480156101f957600080fd5b506102026105f0565b60405161012291906119f4565b34801561021b57600080fd5b50610175610693565b34801561023057600080fd5b5061010d62030d4081565b34801561024757600080fd5b506101c361077f565b34801561025c57600080fd5b506101757f000000000000000000000000000000000000000000000000000000000000000081565b34801561029057600080fd5b506102b461029f366004611a0e565b60ce6020526000908152604090205460ff1681565b6040519015158152602001610122565b3480156102d057600080fd5b506102b46102df366004611a0e565b60cb6020526000908152604090205460ff1681565b34801561030057600080fd5b5061010d61030f366004611a27565b61097c565b6101c3610322366004611a7b565b6109c8565b34801561033357600080fd5b5061037e60cd547dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff167e010000000000000000000000000000000000000000000000000000000000001790565b604051908152602001610122565b6104c57f00000000000000000000000000000000000000000000000000000000000000006103bb85858561097c565b347fd764ad0b0000000000000000000000000000000000000000000000000000000061042760cd547dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff167e010000000000000000000000000000000000000000000000000000000000001790565b338a34898c8c6040516024016104439796959493929190611b4a565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915261129d565b8373ffffffffffffffffffffffffffffffffffffffff167fcb0f7ffd78f9aee47a248fae8db181db6eee833039123e026dcbff529522e52a33858561054a60cd547dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff167e010000000000000000000000000000000000000000000000000000000000001790565b8660405161055c959493929190611ba9565b60405180910390a260405134815233907f8ebb2ec2465bdb2a06a66fc37a0963af8a2a6a1479d81d56fdb8cbb98096d5469060200160405180910390a2505060cd80547dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff808216600101167fffff0000000000000000000000000000000000000000000000000000000000009091161790555050565b606061061b7f0000000000000000000000000000000000000000000000000000000000000000611352565b6106447f0000000000000000000000000000000000000000000000000000000000000000611352565b61066d7f0000000000000000000000000000000000000000000000000000000000000000611352565b60405160200161067f93929190611bf7565b604051602081830303815290604052905090565b60cc5460009073ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff215301610762576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603560248201527f43726f7373446f6d61696e4d657373656e6765723a2078446f6d61696e4d657360448201527f7361676553656e646572206973206e6f7420736574000000000000000000000060648201526084015b60405180910390fd5b5060cc5473ffffffffffffffffffffffffffffffffffffffff1690565b6000547501000000000000000000000000000000000000000000900460ff16158080156107ca575060005460017401000000000000000000000000000000000000000090910460ff16105b806107fc5750303b1580156107fc575060005474010000000000000000000000000000000000000000900460ff166001145b610888576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610759565b600080547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1674010000000000000000000000000000000000000000179055801561090e57600080547fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff1675010000000000000000000000000000000000000000001790555b610916611487565b801561097957600080547fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50565b600062030d4061098d601085611c9c565b6103e86109a26103f863ffffffff8716611c9c565b6109ac9190611cfb565b6109b69190611d22565b6109c09190611d22565b949350505050565b60f087901c60028110610a83576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604d60248201527f43726f7373446f6d61696e4d657373656e6765723a206f6e6c7920766572736960448201527f6f6e2030206f722031206d657373616765732061726520737570706f7274656460648201527f20617420746869732074696d6500000000000000000000000000000000000000608482015260a401610759565b8061ffff16600003610b78576000610ad4878986868080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508f9250611560915050565b600081815260cb602052604090205490915060ff1615610b76576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603760248201527f43726f7373446f6d61696e4d657373656e6765723a206c65676163792077697460448201527f6864726177616c20616c72656164792072656c617965640000000000000000006064820152608401610759565b505b6000610bbe898989898989898080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061157f92505050565b600081815260cf602052604090205490915060ff1615610c3a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610759565b600081815260cf6020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055610c796115a2565b15610cb157853414610c8d57610c8d611d4e565b600081815260ce602052604090205460ff1615610cac57610cac611d4e565b610e03565b3415610d65576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152605060248201527f43726f7373446f6d61696e4d657373656e6765723a2076616c7565206d75737460448201527f206265207a65726f20756e6c657373206d6573736167652069732066726f6d2060648201527f612073797374656d206164647265737300000000000000000000000000000000608482015260a401610759565b600081815260ce602052604090205460ff16610e03576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603060248201527f43726f7373446f6d61696e4d657373656e6765723a206d65737361676520636160448201527f6e6e6f74206265207265706c61796564000000000000000000000000000000006064820152608401610759565b610e0c876116c6565b15610ebf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604360248201527f43726f7373446f6d61696e4d657373656e6765723a2063616e6e6f742073656e60448201527f64206d65737361676520746f20626c6f636b65642073797374656d206164647260648201527f6573730000000000000000000000000000000000000000000000000000000000608482015260a401610759565b600081815260cb602052604090205460ff1615610f5e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603660248201527f43726f7373446f6d61696e4d657373656e6765723a206d65737361676520686160448201527f7320616c7265616479206265656e2072656c61796564000000000000000000006064820152608401610759565b610f6a61afc886611d7d565b5a1015610ff9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603760248201527f43726f7373446f6d61696e4d657373656e6765723a20696e737566666963696560448201527f6e742067617320746f2072656c6179206d6573736167650000000000000000006064820152608401610759565b60cc80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8a1617905560006110958861104d61138861afc8611d95565b5a6110589190611d95565b8988888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061173d92505050565b60cc80547fffffffffffffffffffffffff00000000000000000000000000000000000000001661dead179055905080151560010361113057600082815260cb602052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790555183917f4641df4a962071e12719d8c8c8e5ac7fc4d97b927346a3d7a335b1f7517e133c91a261123d565b600082815260ce602052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790555183917f99d0e048484baa1b1540b1367cb128acd7ab2946d1ed91ec10e3c85e4bf51b8f91a27fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff320161123d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602d60248201527f43726f7373446f6d61696e4d657373656e6765723a206661696c656420746f2060448201527f72656c6179206d657373616765000000000000000000000000000000000000006064820152608401610759565b50600090815260cf6020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690555050505050505050565b905090565b73ffffffffffffffffffffffffffffffffffffffff163b151590565b6040517fe9e05c4200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063e9e05c4290849061131a908890839089906000908990600401611dac565b6000604051808303818588803b15801561133357600080fd5b505af1158015611347573d6000803e3d6000fd5b505050505050505050565b60608160000361139557505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b81156113bf57806113a981611e04565b91506113b89050600a83611e3c565b9150611399565b60008167ffffffffffffffff8111156113da576113da611e50565b6040519080825280601f01601f191660200182016040528015611404576020820181803683370190505b5090505b84156109c057611419600183611d95565b9150611426600a86611e7f565b611431906030611d7d565b60f81b81838151811061144657611446611e93565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350611480600a86611e3c565b9450611408565b6000547501000000000000000000000000000000000000000000900460ff16611532576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610759565b60cc80547fffffffffffffffffffffffff00000000000000000000000000000000000000001661dead179055565b600061156e85858585611757565b805190602001209050949350505050565b600061158f8787878787876117f0565b8051906020012090509695505050505050565b60003373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614801561127c57507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16639bf62d826040518163ffffffff1660e01b8152600401602060405180830381865afa158015611686573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116aa9190611ec2565b73ffffffffffffffffffffffffffffffffffffffff1614905090565b600073ffffffffffffffffffffffffffffffffffffffff821630148061173757507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b92915050565b600080600080845160208601878a8af19695505050505050565b6060848484846040516024016117709493929190611edf565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fcbd4ece9000000000000000000000000000000000000000000000000000000001790529050949350505050565b606086868686868660405160240161180d96959493929190611f29565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fd764ad0b0000000000000000000000000000000000000000000000000000000017905290509695505050505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461097957600080fd5b60008083601f8401126118c357600080fd5b50813567ffffffffffffffff8111156118db57600080fd5b6020830191508360208285010111156118f357600080fd5b9250929050565b803563ffffffff8116811461190e57600080fd5b919050565b6000806000806060858703121561192957600080fd5b84356119348161188f565b9350602085013567ffffffffffffffff81111561195057600080fd5b61195c878288016118b1565b909450925061196f9050604086016118fa565b905092959194509250565b60005b8381101561199557818101518382015260200161197d565b838111156119a4576000848401525b50505050565b600081518084526119c281602086016020860161197a565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b602081526000611a0760208301846119aa565b9392505050565b600060208284031215611a2057600080fd5b5035919050565b600080600060408486031215611a3c57600080fd5b833567ffffffffffffffff811115611a5357600080fd5b611a5f868287016118b1565b9094509250611a729050602085016118fa565b90509250925092565b600080600080600080600060c0888a031215611a9657600080fd5b873596506020880135611aa88161188f565b95506040880135611ab88161188f565b9450606088013593506080880135925060a088013567ffffffffffffffff811115611ae257600080fd5b611aee8a828b016118b1565b989b979a50959850939692959293505050565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b878152600073ffffffffffffffffffffffffffffffffffffffff808916602084015280881660408401525085606083015263ffffffff8516608083015260c060a0830152611b9c60c083018486611b01565b9998505050505050505050565b73ffffffffffffffffffffffffffffffffffffffff86168152608060208201526000611bd9608083018688611b01565b905083604083015263ffffffff831660608301529695505050505050565b60008451611c0981846020890161197a565b80830190507f2e000000000000000000000000000000000000000000000000000000000000008082528551611c45816001850160208a0161197a565b60019201918201528351611c6081600284016020880161197a565b0160020195945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600067ffffffffffffffff80831681851681830481118215151615611cc357611cc3611c6d565b02949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600067ffffffffffffffff80841680611d1657611d16611ccc565b92169190910492915050565b600067ffffffffffffffff808316818516808303821115611d4557611d45611c6d565b01949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b60008219821115611d9057611d90611c6d565b500190565b600082821015611da757611da7611c6d565b500390565b73ffffffffffffffffffffffffffffffffffffffff8616815284602082015267ffffffffffffffff84166040820152821515606082015260a060808201526000611df960a08301846119aa565b979650505050505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611e3557611e35611c6d565b5060010190565b600082611e4b57611e4b611ccc565b500490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600082611e8e57611e8e611ccc565b500690565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060208284031215611ed457600080fd5b8151611a078161188f565b600073ffffffffffffffffffffffffffffffffffffffff808716835280861660208401525060806040830152611f1860808301856119aa565b905082606083015295945050505050565b868152600073ffffffffffffffffffffffffffffffffffffffff808816602084015280871660408401525084606083015283608083015260c060a0830152611f7460c08301846119aa565b9897505050505050505056fea164736f6c634300080f000a",
    "sourceMap": "626:1369:0:-:0;;;926:184;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;524:42:42;8472:33:99;;975:1:0;826:22:110;;;;858;;981:1:0;890:22:110;;-1:-1:-1;;;;;1065:16:0;::::2;;::::0;1091:12:::2;:10;:12::i;:::-;926:184:::0;626:1369;;1160:87;3111:19:114;3134:13;-1:-1:-1;;;3134:13:114;;;;3133:14;;3179:34;;;;-1:-1:-1;3197:12:114;;3212:1;-1:-1:-1;;;3197:12:114;;;;;:16;3179:34;3178:108;;;;3220:44;3258:4;3220:29;;;;;:44;;:::i;:::-;3219:45;:66;;;;-1:-1:-1;3268:12:114;;-1:-1:-1;;;3268:12:114;;;;3284:1;3268:17;3219:66;3157:201;;;;-1:-1:-1;;;3157:201:114;;532:2:165;3157:201:114;;;514:21:165;571:2;551:18;;;544:30;610:34;590:18;;;583:62;-1:-1:-1;;;661:18:165;;;654:44;715:19;;3157:201:114;;;;;;;;;3368:12;:16;;-1:-1:-1;;;;3368:16:114;-1:-1:-1;;;3368:16:114;;;3394:65;;;;3428:13;:20;;-1:-1:-1;;;;3428:20:114;-1:-1:-1;;;3428:20:114;;;3394:65;1211:29:0::1;:27;:29::i;:::-;3483:14:114::0;3479:99;;;3529:5;3513:21;;-1:-1:-1;;;;3513:21:114;;;3553:14;;-1:-1:-1;897:36:165;;3553:14:114;;885:2:165;870:18;3553:14:114;;;;;;;3479:99;3101:483;1160:87:0:o;1186:320:115:-;-1:-1:-1;;;;;1476:19:115;;:23;;;1186:320::o;17309:128:99:-;4910:13:114;;-1:-1:-1;;;4910:13:114;;;;4902:69;;;;-1:-1:-1;;;4902:69:114;;1146:2:165;4902:69:114;;;1128:21:165;1185:2;1165:18;;;1158:30;1224:34;1204:18;;;1197:62;-1:-1:-1;;;1275:18:165;;;1268:41;1326:19;;4902:69:114;944:407:165;4902:69:114;17384:16:99::1;:46:::0;;-1:-1:-1;;;;;;17384:46:99::1;1296:42:39;17384:46:99;::::0;;17309:128::o;14:311:165:-;105:6;158:2;146:9;137:7;133:23;129:32;126:52;;;174:1;171;164:12;126:52;200:16;;-1:-1:-1;;;;;245:31:165;;235:42;;225:70;;291:1;288;281:12;225:70;314:5;14:311;-1:-1:-1;;;14:311:165:o;944:407::-;626:1369:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x6080604052600436106100f35760003560e01c80637dea7cc31161008a578063b1b1b20911610059578063b1b1b209146102c4578063b28ade25146102f4578063d764ad0b14610314578063ecc704281461032757600080fd5b80637dea7cc3146102245780638129fc1c1461023b5780639fce812c14610250578063a4e7f8bd1461028457600080fd5b80633dbb202b116100c65780633dbb202b146101b05780633f827a5a146101c557806354fd4d50146101ed5780636e296e451461020f57600080fd5b8063028f85f7146100f85780630c5684981461012b5780630ff754ea146101415780632828d7e81461019a575b600080fd5b34801561010457600080fd5b5061010d601081565b60405167ffffffffffffffff90911681526020015b60405180910390f35b34801561013757600080fd5b5061010d6103e881565b34801561014d57600080fd5b506101757f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610122565b3480156101a657600080fd5b5061010d6103f881565b6101c36101be366004611913565b61038c565b005b3480156101d157600080fd5b506101da600181565b60405161ffff9091168152602001610122565b3480156101f957600080fd5b506102026105f0565b60405161012291906119f4565b34801561021b57600080fd5b50610175610693565b34801561023057600080fd5b5061010d62030d4081565b34801561024757600080fd5b506101c361077f565b34801561025c57600080fd5b506101757f000000000000000000000000000000000000000000000000000000000000000081565b34801561029057600080fd5b506102b461029f366004611a0e565b60ce6020526000908152604090205460ff1681565b6040519015158152602001610122565b3480156102d057600080fd5b506102b46102df366004611a0e565b60cb6020526000908152604090205460ff1681565b34801561030057600080fd5b5061010d61030f366004611a27565b61097c565b6101c3610322366004611a7b565b6109c8565b34801561033357600080fd5b5061037e60cd547dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff167e010000000000000000000000000000000000000000000000000000000000001790565b604051908152602001610122565b6104c57f00000000000000000000000000000000000000000000000000000000000000006103bb85858561097c565b347fd764ad0b0000000000000000000000000000000000000000000000000000000061042760cd547dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff167e010000000000000000000000000000000000000000000000000000000000001790565b338a34898c8c6040516024016104439796959493929190611b4a565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915261129d565b8373ffffffffffffffffffffffffffffffffffffffff167fcb0f7ffd78f9aee47a248fae8db181db6eee833039123e026dcbff529522e52a33858561054a60cd547dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff167e010000000000000000000000000000000000000000000000000000000000001790565b8660405161055c959493929190611ba9565b60405180910390a260405134815233907f8ebb2ec2465bdb2a06a66fc37a0963af8a2a6a1479d81d56fdb8cbb98096d5469060200160405180910390a2505060cd80547dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff808216600101167fffff0000000000000000000000000000000000000000000000000000000000009091161790555050565b606061061b7f0000000000000000000000000000000000000000000000000000000000000000611352565b6106447f0000000000000000000000000000000000000000000000000000000000000000611352565b61066d7f0000000000000000000000000000000000000000000000000000000000000000611352565b60405160200161067f93929190611bf7565b604051602081830303815290604052905090565b60cc5460009073ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff215301610762576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603560248201527f43726f7373446f6d61696e4d657373656e6765723a2078446f6d61696e4d657360448201527f7361676553656e646572206973206e6f7420736574000000000000000000000060648201526084015b60405180910390fd5b5060cc5473ffffffffffffffffffffffffffffffffffffffff1690565b6000547501000000000000000000000000000000000000000000900460ff16158080156107ca575060005460017401000000000000000000000000000000000000000090910460ff16105b806107fc5750303b1580156107fc575060005474010000000000000000000000000000000000000000900460ff166001145b610888576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610759565b600080547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1674010000000000000000000000000000000000000000179055801561090e57600080547fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff1675010000000000000000000000000000000000000000001790555b610916611487565b801561097957600080547fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50565b600062030d4061098d601085611c9c565b6103e86109a26103f863ffffffff8716611c9c565b6109ac9190611cfb565b6109b69190611d22565b6109c09190611d22565b949350505050565b60f087901c60028110610a83576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604d60248201527f43726f7373446f6d61696e4d657373656e6765723a206f6e6c7920766572736960448201527f6f6e2030206f722031206d657373616765732061726520737570706f7274656460648201527f20617420746869732074696d6500000000000000000000000000000000000000608482015260a401610759565b8061ffff16600003610b78576000610ad4878986868080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508f9250611560915050565b600081815260cb602052604090205490915060ff1615610b76576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603760248201527f43726f7373446f6d61696e4d657373656e6765723a206c65676163792077697460448201527f6864726177616c20616c72656164792072656c617965640000000000000000006064820152608401610759565b505b6000610bbe898989898989898080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061157f92505050565b600081815260cf602052604090205490915060ff1615610c3a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610759565b600081815260cf6020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055610c796115a2565b15610cb157853414610c8d57610c8d611d4e565b600081815260ce602052604090205460ff1615610cac57610cac611d4e565b610e03565b3415610d65576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152605060248201527f43726f7373446f6d61696e4d657373656e6765723a2076616c7565206d75737460448201527f206265207a65726f20756e6c657373206d6573736167652069732066726f6d2060648201527f612073797374656d206164647265737300000000000000000000000000000000608482015260a401610759565b600081815260ce602052604090205460ff16610e03576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603060248201527f43726f7373446f6d61696e4d657373656e6765723a206d65737361676520636160448201527f6e6e6f74206265207265706c61796564000000000000000000000000000000006064820152608401610759565b610e0c876116c6565b15610ebf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604360248201527f43726f7373446f6d61696e4d657373656e6765723a2063616e6e6f742073656e60448201527f64206d65737361676520746f20626c6f636b65642073797374656d206164647260648201527f6573730000000000000000000000000000000000000000000000000000000000608482015260a401610759565b600081815260cb602052604090205460ff1615610f5e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603660248201527f43726f7373446f6d61696e4d657373656e6765723a206d65737361676520686160448201527f7320616c7265616479206265656e2072656c61796564000000000000000000006064820152608401610759565b610f6a61afc886611d7d565b5a1015610ff9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603760248201527f43726f7373446f6d61696e4d657373656e6765723a20696e737566666963696560448201527f6e742067617320746f2072656c6179206d6573736167650000000000000000006064820152608401610759565b60cc80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8a1617905560006110958861104d61138861afc8611d95565b5a6110589190611d95565b8988888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061173d92505050565b60cc80547fffffffffffffffffffffffff00000000000000000000000000000000000000001661dead179055905080151560010361113057600082815260cb602052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790555183917f4641df4a962071e12719d8c8c8e5ac7fc4d97b927346a3d7a335b1f7517e133c91a261123d565b600082815260ce602052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790555183917f99d0e048484baa1b1540b1367cb128acd7ab2946d1ed91ec10e3c85e4bf51b8f91a27fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff320161123d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602d60248201527f43726f7373446f6d61696e4d657373656e6765723a206661696c656420746f2060448201527f72656c6179206d657373616765000000000000000000000000000000000000006064820152608401610759565b50600090815260cf6020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690555050505050505050565b905090565b73ffffffffffffffffffffffffffffffffffffffff163b151590565b6040517fe9e05c4200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063e9e05c4290849061131a908890839089906000908990600401611dac565b6000604051808303818588803b15801561133357600080fd5b505af1158015611347573d6000803e3d6000fd5b505050505050505050565b60608160000361139557505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b81156113bf57806113a981611e04565b91506113b89050600a83611e3c565b9150611399565b60008167ffffffffffffffff8111156113da576113da611e50565b6040519080825280601f01601f191660200182016040528015611404576020820181803683370190505b5090505b84156109c057611419600183611d95565b9150611426600a86611e7f565b611431906030611d7d565b60f81b81838151811061144657611446611e93565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350611480600a86611e3c565b9450611408565b6000547501000000000000000000000000000000000000000000900460ff16611532576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610759565b60cc80547fffffffffffffffffffffffff00000000000000000000000000000000000000001661dead179055565b600061156e85858585611757565b805190602001209050949350505050565b600061158f8787878787876117f0565b8051906020012090509695505050505050565b60003373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614801561127c57507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16639bf62d826040518163ffffffff1660e01b8152600401602060405180830381865afa158015611686573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116aa9190611ec2565b73ffffffffffffffffffffffffffffffffffffffff1614905090565b600073ffffffffffffffffffffffffffffffffffffffff821630148061173757507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b92915050565b600080600080845160208601878a8af19695505050505050565b6060848484846040516024016117709493929190611edf565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fcbd4ece9000000000000000000000000000000000000000000000000000000001790529050949350505050565b606086868686868660405160240161180d96959493929190611f29565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fd764ad0b0000000000000000000000000000000000000000000000000000000017905290509695505050505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461097957600080fd5b60008083601f8401126118c357600080fd5b50813567ffffffffffffffff8111156118db57600080fd5b6020830191508360208285010111156118f357600080fd5b9250929050565b803563ffffffff8116811461190e57600080fd5b919050565b6000806000806060858703121561192957600080fd5b84356119348161188f565b9350602085013567ffffffffffffffff81111561195057600080fd5b61195c878288016118b1565b909450925061196f9050604086016118fa565b905092959194509250565b60005b8381101561199557818101518382015260200161197d565b838111156119a4576000848401525b50505050565b600081518084526119c281602086016020860161197a565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b602081526000611a0760208301846119aa565b9392505050565b600060208284031215611a2057600080fd5b5035919050565b600080600060408486031215611a3c57600080fd5b833567ffffffffffffffff811115611a5357600080fd5b611a5f868287016118b1565b9094509250611a729050602085016118fa565b90509250925092565b600080600080600080600060c0888a031215611a9657600080fd5b873596506020880135611aa88161188f565b95506040880135611ab88161188f565b9450606088013593506080880135925060a088013567ffffffffffffffff811115611ae257600080fd5b611aee8a828b016118b1565b989b979a50959850939692959293505050565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b878152600073ffffffffffffffffffffffffffffffffffffffff808916602084015280881660408401525085606083015263ffffffff8516608083015260c060a0830152611b9c60c083018486611b01565b9998505050505050505050565b73ffffffffffffffffffffffffffffffffffffffff86168152608060208201526000611bd9608083018688611b01565b905083604083015263ffffffff831660608301529695505050505050565b60008451611c0981846020890161197a565b80830190507f2e000000000000000000000000000000000000000000000000000000000000008082528551611c45816001850160208a0161197a565b60019201918201528351611c6081600284016020880161197a565b0160020195945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600067ffffffffffffffff80831681851681830481118215151615611cc357611cc3611c6d565b02949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600067ffffffffffffffff80841680611d1657611d16611ccc565b92169190910492915050565b600067ffffffffffffffff808316818516808303821115611d4557611d45611c6d565b01949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b60008219821115611d9057611d90611c6d565b500190565b600082821015611da757611da7611c6d565b500390565b73ffffffffffffffffffffffffffffffffffffffff8616815284602082015267ffffffffffffffff84166040820152821515606082015260a060808201526000611df960a08301846119aa565b979650505050505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611e3557611e35611c6d565b5060010190565b600082611e4b57611e4b611ccc565b500490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600082611e8e57611e8e611ccc565b500690565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060208284031215611ed457600080fd5b8151611a078161188f565b600073ffffffffffffffffffffffffffffffffffffffff808716835280861660208401525060806040830152611f1860808301856119aa565b905082606083015295945050505050565b868152600073ffffffffffffffffffffffffffffffffffffffff808816602084015280871660408401525084606083015283608083015260c060a0830152611f7460c08301846119aa565b9897505050505050505056fea164736f6c634300080f000a",
    "sourceMap": "626:1369:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4588:53:99;;;;;;;;;;;;4639:2;4588:53;;;;;188:18:165;176:31;;;158:50;;146:2;131:18;4588:53:99;;;;;;;;4416:66;;;;;;;;;;;;4478:4;4416:66;;756:36:0;;;;;;;;;;;;;;;;;;424:42:165;412:55;;;394:74;;382:2;367:18;756:36:0;219:255:165;4244:64:99;;;;;;;;;;;;4304:4;4244:64;;9110:1080;;;;;;:::i;:::-;;:::i;:::-;;3945:42;;;;;;;;;;;;3986:1;3945:42;;;;;1953:6:165;1941:19;;;1923:38;;1911:2;1896:18;3945:42:99;1779:188:165;1057:372:110;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;15127:262:99:-;;;;;;;;;;;;;:::i;4080:58::-;;;;;;;;;;;;4131:7;4080:58;;1160:87:0;;;;;;;;;;;;;:::i;5076:40:99:-;;;;;;;;;;;;;;;6405:46;;;;;;;;;;-1:-1:-1;6405:46:99;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;3363:14:165;;3356:22;3338:41;;3326:2;3311:18;6405:46:99;3198:187:165;5385:50:99;;;;;;;;;;-1:-1:-1;5385:50:99;;;;;:::i;:::-;;;;;;;;;;;;;;;;16499:708;;;;;;;;;;-1:-1:-1;16499:708:99;;;;;:::i;:::-;;:::i;10892:3829::-;;;;;;:::i;:::-;;:::i;15729:134::-;;;;;;;;;;;;15830:8;;;;5035:18:40;5032:30;;15729:134:99;;;;4919:25:165;;;4907:2;4892:18;15729:134:99;4773:177:165;9110:1080:99;9600:381;9626:15;9655:31;9663:8;;9673:12;9655:7;:31::i;:::-;9700:9;9763:26;9807:14;15830:8;;;;5035:18:40;5032:30;;15729:134:99;9807:14;9839:10;9867:7;9892:9;9919:12;9949:8;;9723:248;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9600:12;:381::i;:::-;10009:7;9997:72;;;10018:10;10030:8;;10040:14;15830:8;;;;5035:18:40;5032:30;;15729:134:99;10040:14;10056:12;9997:72;;;;;;;;;;:::i;:::-;;;;;;;;10084:44;;10118:9;4919:25:165;;10106:10:99;;10084:44;;4907:2:165;4892:18;10084:44:99;;;;;;;-1:-1:-1;;10165:8:99;10163:10;;;;;;;;;;;;;;;;-1:-1:-1;;9110:1080:99:o;1057:372:110:-;1097:13;1203:31;1220:13;1203:16;:31::i;:::-;1281;1298:13;1281:16;:31::i;:::-;1359;1376:13;1359:16;:31::i;:::-;1165:243;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;1122:300;;1057:372;:::o;15127:262:99:-;15222:16;;15182:7;;15222:47;:16;:47;;15201:147;;;;;;;7683:2:165;15201:147:99;;;7665:21:165;7722:2;7702:18;;;7695:30;7761:34;7741:18;;;7734:62;7832:23;7812:18;;;7805:51;7873:19;;15201:147:99;;;;;;;;;-1:-1:-1;15366:16:99;;;;;15127:262::o;1160:87:0:-;3111:19:114;3134:13;;;;;;3133:14;;3179:34;;;;-1:-1:-1;3197:12:114;;3212:1;3197:12;;;;;;:16;3179:34;3178:108;;;-1:-1:-1;3258:4:114;1476:19:115;:23;;;3219:66:114;;-1:-1:-1;3268:12:114;;;;;;;3284:1;3268:17;3219:66;3157:201;;;;;;;8105:2:165;3157:201:114;;;8087:21:165;8144:2;8124:18;;;8117:30;8183:34;8163:18;;;8156:62;8254:16;8234:18;;;8227:44;8288:19;;3157:201:114;7903:410:165;3157:201:114;3368:12;:16;;;;;;;;3394:65;;;;3428:13;:20;;;;;;;;3394:65;1211:29:0::1;:27;:29::i;:::-;3483:14:114::0;3479:99;;;3529:5;3513:21;;;;;;3553:14;;-1:-1:-1;8470:36:165;;3553:14:114;;8458:2:165;8443:18;3553:14:114;;;;;;;3479:99;3101:483;1160:87:0:o;16499:708:99:-;16583:6;4131:7;17075:51;4639:2;17082:8;17075:51;:::i;:::-;4478:4;16912:57;4304:4;16912:20;;;:57;:::i;:::-;16911:114;;;;:::i;:::-;16910:217;;;;:::i;:::-;:290;;;;:::i;:::-;16859:341;16499:708;-1:-1:-1;;;;16499:708:99:o;10892:3829::-;5650:3:40;5646:16;;;11207:1:99;11197:11;;11176:135;;;;;;;9817:2:165;11176:135:99;;;9799:21:165;9856:2;9836:18;;;9829:30;9895:34;9875:18;;;9868:62;9966:34;9946:18;;;9939:62;10038:15;10017:19;;;10010:44;10071:19;;11176:135:99;9615:481:165;11176:135:99;11513:7;:12;;11524:1;11513:12;11509:293;;11541:15;11559:68;11592:7;11601;11610:8;;11559:68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;11620:6:99;;-1:-1:-1;11559:32:99;;-1:-1:-1;;11559:68:99:i;:::-;11666:27;;;;:18;:27;;;;;;11541:86;;-1:-1:-1;11666:27:99;;:36;11641:150;;;;;;;10303:2:165;11641:150:99;;;10285:21:165;10342:2;10322:18;;;10315:30;10381:34;10361:18;;;10354:62;10452:25;10432:18;;;10425:53;10495:19;;11641:150:99;10101:419:165;11641:150:99;11527:275;11509:293;11972:21;11996:172;12042:6;12062:7;12083;12104:6;12124:12;12150:8;;11996:172;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;11996:32:99;;-1:-1:-1;;;11996:172:99:i;:::-;12263:30;;;;:15;:30;;;;;;11972:196;;-1:-1:-1;12263:30:99;;12259:102;;;12309:41;;;;;10727:2:165;12309:41:99;;;10709:21:165;10766:2;10746:18;;;10739:30;10805:33;10785:18;;;10778:61;10856:18;;12309:41:99;10525:355:165;12259:102:99;12429:30;;;;:15;:30;;;;;:37;;;;12462:4;12429:37;;;12481:19;:17;:19::i;:::-;12477:598;;;12670:6;12657:9;:19;12650:27;;;;:::i;:::-;12699:29;;;;:14;:29;;;;;;;;12698:30;12691:38;;;;:::i;:::-;12477:598;;;12785:9;:14;12760:153;;;;;;;11276:2:165;12760:153:99;;;11258:21:165;11315:2;11295:18;;;11288:30;11354:34;11334:18;;;11327:62;11425:34;11405:18;;;11398:62;11497:18;11476:19;;;11469:47;11533:19;;12760:153:99;11074:484:165;12760:153:99;12953:29;;;;:14;:29;;;;;;;;12928:136;;;;;;;11765:2:165;12928:136:99;;;11747:21:165;11804:2;11784:18;;;11777:30;11843:34;11823:18;;;11816:62;11914:18;11894;;;11887:46;11950:19;;12928:136:99;11563:412:165;12928:136:99;13106:24;13122:7;13106:15;:24::i;:::-;:33;13085:147;;;;;;;12182:2:165;13085:147:99;;;12164:21:165;12221:2;12201:18;;;12194:30;12260:34;12240:18;;;12233:62;12331:34;12311:18;;;12304:62;12403:5;12382:19;;;12375:34;12426:19;;13085:147:99;11980:471:165;13085:147:99;13264:33;;;;:18;:33;;;;;;;;:42;13243:143;;;;;;;12658:2:165;13243:143:99;;;12640:21:165;12697:2;12677:18;;;12670:30;12736:34;12716:18;;;12709:62;12807:24;12787:18;;;12780:52;12849:19;;13243:143:99;12456:418:165;13243:143:99;13431:33;4777:6;13431:12;:33;:::i;:::-;13418:9;:46;;13397:148;;;;;;;13214:2:165;13397:148:99;;;13196:21:165;13253:2;13233:18;;;13226:30;13292:34;13272:18;;;13265:62;13363:25;13343:18;;;13336:53;13406:19;;13397:148:99;13012:419:165;13397:148:99;13556:16;:26;;;;;;;;;;-1:-1:-1;13607:70:99;13621:7;4941:25;4962:4;4777:6;4941:25;:::i;:::-;13630:9;:28;;;;:::i;:::-;13660:6;13668:8;;13607:70;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;13607:13:99;;-1:-1:-1;;;13607:70:99:i;:::-;13687:16;:46;;;;1296:42:39;13687:46:99;;;13592:85;-1:-1:-1;13748:15:99;;;13687:46;13748:15;13744:865;;13779:33;;;;:18;:33;;;;;;:40;;;;13815:4;13779:40;;;13838:29;13798:13;;13838:29;;;13744:865;;;13898:29;;;;:14;:29;;;;;;:36;;;;13930:4;13898:36;;;13953:35;13913:13;;13953:35;;;14468:41;:9;:41;14464:135;;14529:55;;;;;13768:2:165;14529:55:99;;;13750:21:165;13807:2;13787:18;;;13780:30;13846:34;13826:18;;;13819:62;13917:15;13897:18;;;13890:43;13950:19;;14529:55:99;13566:409:165;14464:135:99;-1:-1:-1;14709:5:99;14676:30;;;:15;:30;;;;;:38;;;;;;-1:-1:-1;;;;;;;;10892:3829:99:o;15800:56::-;15793:63;;15729:134;:::o;1186:320:115:-;1476:19;;;:23;;;1186:320::o;1309:242:0:-;1464:80;;;;;:25;:6;:25;;;;1498:6;;1464:80;;1507:3;;1498:6;;1520:9;;1531:5;;1538;;1464:80;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1309:242;;;;:::o;392:703:138:-;448:13;665:5;674:1;665:10;661:51;;-1:-1:-1;;691:10:138;;;;;;;;;;;;;;;;;;392:703::o;661:51::-;736:5;721:12;775:75;782:9;;775:75;;807:8;;;;:::i;:::-;;-1:-1:-1;829:10:138;;-1:-1:-1;837:2:138;829:10;;:::i;:::-;;;775:75;;;859:19;891:6;881:17;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;881:17:138;;859:39;;908:150;915:10;;908:150;;941:11;951:1;941:11;;:::i;:::-;;-1:-1:-1;1009:10:138;1017:2;1009:5;:10;:::i;:::-;996:24;;:2;:24;:::i;:::-;983:39;;966:6;973;966:14;;;;;;;;:::i;:::-;;;;:56;;;;;;;;;;-1:-1:-1;1036:11:138;1045:2;1036:11;;:::i;:::-;;;908:150;;17309:128:99;4910:13:114;;;;;;;4902:69;;;;;;;15594:2:165;4902:69:114;;;15576:21:165;15633:2;15613:18;;;15606:30;15672:34;15652:18;;;15645:62;15743:13;15723:18;;;15716:41;15774:19;;4902:69:114;15392:407:165;4902:69:114;17384:16:99::1;:46:::0;;;::::1;1296:42:39;17384:46:99;::::0;;17309:128::o;3202:277:41:-;3367:7;3403:68;3439:7;3448;3457:5;3464:6;3403:35;:68::i;:::-;3393:79;;;;;;3386:86;;3202:277;;;;;;:::o;3973:527::-;4189:7;4254:225;4311:6;4339:7;4368;4397:6;4425:9;4456:5;4254:35;:225::i;:::-;4227:266;;;;;;4208:285;;3973:527;;;;;;;;:::o;1613:160:0:-;1674:4;1697:10;:29;1719:6;1697:29;;:69;;;;;1751:15;1730:36;;:6;:15;;;:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:36;;;1690:76;;1613:160;:::o;1835:158::-;1909:4;1932:24;;;1951:4;1932:24;;:54;;;1979:6;1960:26;;:7;:26;;;1932:54;1925:61;1835:158;-1:-1:-1;;1835:158:0:o;452:528:43:-;593:4;609:13;914:1;885;848:9;842:16;810:4;799:9;795:20;756:6;718:7;689:4;667:272;655:284;452:528;-1:-1:-1;;;;;;452:528:43:o;3111:414:40:-;3278:12;3425:7;3450;3475:5;3498:6;3321:197;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3111:414:40;;;;;;:::o;4021:532::-;4239:12;4402:6;4426:7;4451;4476:6;4500:9;4527:5;4282:264;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4021:532:40;;;;;;;;:::o;479:154:165:-;565:42;558:5;554:54;547:5;544:65;534:93;;623:1;620;613:12;638:347;689:8;699:6;753:3;746:4;738:6;734:17;730:27;720:55;;771:1;768;761:12;720:55;-1:-1:-1;794:20:165;;837:18;826:30;;823:50;;;869:1;866;859:12;823:50;906:4;898:6;894:17;882:29;;958:3;951:4;942:6;934;930:19;926:30;923:39;920:59;;;975:1;972;965:12;920:59;638:347;;;;;:::o;990:163::-;1057:20;;1117:10;1106:22;;1096:33;;1086:61;;1143:1;1140;1133:12;1086:61;990:163;;;:::o;1158:616::-;1245:6;1253;1261;1269;1322:2;1310:9;1301:7;1297:23;1293:32;1290:52;;;1338:1;1335;1328:12;1290:52;1377:9;1364:23;1396:31;1421:5;1396:31;:::i;:::-;1446:5;-1:-1:-1;1502:2:165;1487:18;;1474:32;1529:18;1518:30;;1515:50;;;1561:1;1558;1551:12;1515:50;1600:58;1650:7;1641:6;1630:9;1626:22;1600:58;:::i;:::-;1677:8;;-1:-1:-1;1574:84:165;-1:-1:-1;1731:37:165;;-1:-1:-1;1764:2:165;1749:18;;1731:37;:::i;:::-;1721:47;;1158:616;;;;;;;:::o;1972:258::-;2044:1;2054:113;2068:6;2065:1;2062:13;2054:113;;;2144:11;;;2138:18;2125:11;;;2118:39;2090:2;2083:10;2054:113;;;2185:6;2182:1;2179:13;2176:48;;;2220:1;2211:6;2206:3;2202:16;2195:27;2176:48;;1972:258;;;:::o;2235:317::-;2277:3;2315:5;2309:12;2342:6;2337:3;2330:19;2358:63;2414:6;2407:4;2402:3;2398:14;2391:4;2384:5;2380:16;2358:63;:::i;:::-;2466:2;2454:15;2471:66;2450:88;2441:98;;;;2541:4;2437:109;;2235:317;-1:-1:-1;;2235:317:165:o;2557:220::-;2706:2;2695:9;2688:21;2669:4;2726:45;2767:2;2756:9;2752:18;2744:6;2726:45;:::i;:::-;2718:53;2557:220;-1:-1:-1;;;2557:220:165:o;3013:180::-;3072:6;3125:2;3113:9;3104:7;3100:23;3096:32;3093:52;;;3141:1;3138;3131:12;3093:52;-1:-1:-1;3164:23:165;;3013:180;-1:-1:-1;3013:180:165:o;3390:481::-;3468:6;3476;3484;3537:2;3525:9;3516:7;3512:23;3508:32;3505:52;;;3553:1;3550;3543:12;3505:52;3593:9;3580:23;3626:18;3618:6;3615:30;3612:50;;;3658:1;3655;3648:12;3612:50;3697:58;3747:7;3738:6;3727:9;3723:22;3697:58;:::i;:::-;3774:8;;-1:-1:-1;3671:84:165;-1:-1:-1;3828:37:165;;-1:-1:-1;3861:2:165;3846:18;;3828:37;:::i;:::-;3818:47;;3390:481;;;;;:::o;3876:892::-;3991:6;3999;4007;4015;4023;4031;4039;4092:3;4080:9;4071:7;4067:23;4063:33;4060:53;;;4109:1;4106;4099:12;4060:53;4145:9;4132:23;4122:33;;4205:2;4194:9;4190:18;4177:32;4218:31;4243:5;4218:31;:::i;:::-;4268:5;-1:-1:-1;4325:2:165;4310:18;;4297:32;4338:33;4297:32;4338:33;:::i;:::-;4390:7;-1:-1:-1;4444:2:165;4429:18;;4416:32;;-1:-1:-1;4495:3:165;4480:19;;4467:33;;-1:-1:-1;4551:3:165;4536:19;;4523:33;4579:18;4568:30;;4565:50;;;4611:1;4608;4601:12;4565:50;4650:58;4700:7;4691:6;4680:9;4676:22;4650:58;:::i;:::-;3876:892;;;;-1:-1:-1;3876:892:165;;-1:-1:-1;3876:892:165;;;;4624:84;;-1:-1:-1;;;3876:892:165:o;4955:325::-;5043:6;5038:3;5031:19;5095:6;5088:5;5081:4;5076:3;5072:14;5059:43;;5147:1;5140:4;5131:6;5126:3;5122:16;5118:27;5111:38;5013:3;5269:4;5199:66;5194:2;5186:6;5182:15;5178:88;5173:3;5169:98;5165:109;5158:116;;4955:325;;;;:::o;5285:697::-;5580:6;5569:9;5562:25;5543:4;5606:42;5696:2;5688:6;5684:15;5679:2;5668:9;5664:18;5657:43;5748:2;5740:6;5736:15;5731:2;5720:9;5716:18;5709:43;;5788:6;5783:2;5772:9;5768:18;5761:34;5844:10;5836:6;5832:23;5826:3;5815:9;5811:19;5804:52;5893:3;5887;5876:9;5872:19;5865:32;5914:62;5971:3;5960:9;5956:19;5948:6;5940;5914:62;:::i;:::-;5906:70;5285:697;-1:-1:-1;;;;;;;;;5285:697:165:o;5987:524::-;6239:42;6231:6;6227:55;6216:9;6209:74;6319:3;6314:2;6303:9;6299:18;6292:31;6190:4;6340:62;6397:3;6386:9;6382:19;6374:6;6366;6340:62;:::i;:::-;6332:70;;6438:6;6433:2;6422:9;6418:18;6411:34;6493:10;6485:6;6481:23;6476:2;6465:9;6461:18;6454:51;5987:524;;;;;;;;:::o;6516:960::-;6945:3;6983:6;6977:13;6999:53;7045:6;7040:3;7033:4;7025:6;7021:17;6999:53;:::i;:::-;7083:6;7078:3;7074:16;7061:29;;7109:3;7135:2;7128:5;7121:17;7169:6;7163:13;7185:65;7241:8;7237:1;7230:5;7226:13;7219:4;7211:6;7207:17;7185:65;:::i;:::-;7313:1;7269:20;;7305:10;;;7298:22;7345:13;;7367:62;7345:13;7416:1;7408:10;;7401:4;7389:17;;7367:62;:::i;:::-;7449:17;7468:1;7445:25;;6516:960;-1:-1:-1;;;;;6516:960:165:o;8517:184::-;8569:77;8566:1;8559:88;8666:4;8663:1;8656:15;8690:4;8687:1;8680:15;8706:270;8745:7;8777:18;8822:2;8819:1;8815:10;8852:2;8849:1;8845:10;8908:3;8904:2;8900:12;8895:3;8892:21;8885:3;8878:11;8871:19;8867:47;8864:73;;;8917:18;;:::i;:::-;8957:13;;8706:270;-1:-1:-1;;;;8706:270:165:o;8981:184::-;9033:77;9030:1;9023:88;9130:4;9127:1;9120:15;9154:4;9151:1;9144:15;9170:199;9209:1;9235:18;9280:2;9277:1;9273:10;9302:3;9292:37;;9309:18;;:::i;:::-;9347:10;;9343:20;;;;;9170:199;-1:-1:-1;;9170:199:165:o;9374:236::-;9413:3;9441:18;9486:2;9483:1;9479:10;9516:2;9513:1;9509:10;9547:3;9543:2;9539:12;9534:3;9531:21;9528:47;;;9555:18;;:::i;:::-;9591:13;;9374:236;-1:-1:-1;;;;9374:236:165:o;10885:184::-;10937:77;10934:1;10927:88;11034:4;11031:1;11024:15;11058:4;11055:1;11048:15;12879:128;12919:3;12950:1;12946:6;12943:1;12940:13;12937:39;;;12956:18;;:::i;:::-;-1:-1:-1;12992:9:165;;12879:128::o;13436:125::-;13476:4;13504:1;13501;13498:8;13495:34;;;13509:18;;:::i;:::-;-1:-1:-1;13546:9:165;;13436:125::o;13980:587::-;14243:42;14235:6;14231:55;14220:9;14213:74;14323:6;14318:2;14307:9;14303:18;14296:34;14378:18;14370:6;14366:31;14361:2;14350:9;14346:18;14339:59;14448:6;14441:14;14434:22;14429:2;14418:9;14414:18;14407:50;14494:3;14488;14477:9;14473:19;14466:32;14194:4;14515:46;14556:3;14545:9;14541:19;14533:6;14515:46;:::i;:::-;14507:54;13980:587;-1:-1:-1;;;;;;;13980:587:165:o;14572:195::-;14611:3;14642:66;14635:5;14632:77;14629:103;;14712:18;;:::i;:::-;-1:-1:-1;14759:1:165;14748:13;;14572:195::o;14772:120::-;14812:1;14838;14828:35;;14843:18;;:::i;:::-;-1:-1:-1;14877:9:165;;14772:120::o;14897:184::-;14949:77;14946:1;14939:88;15046:4;15043:1;15036:15;15070:4;15067:1;15060:15;15086:112;15118:1;15144;15134:35;;15149:18;;:::i;:::-;-1:-1:-1;15183:9:165;;15086:112::o;15203:184::-;15255:77;15252:1;15245:88;15352:4;15349:1;15342:15;15376:4;15373:1;15366:15;15804:251;15874:6;15927:2;15915:9;15906:7;15902:23;15898:32;15895:52;;;15943:1;15940;15933:12;15895:52;15975:9;15969:16;15994:31;16019:5;15994:31;:::i;16060:512::-;16254:4;16283:42;16364:2;16356:6;16352:15;16341:9;16334:34;16416:2;16408:6;16404:15;16399:2;16388:9;16384:18;16377:43;;16456:3;16451:2;16440:9;16436:18;16429:31;16477:46;16518:3;16507:9;16503:19;16495:6;16477:46;:::i;:::-;16469:54;;16559:6;16554:2;16543:9;16539:18;16532:34;16060:512;;;;;;;:::o;16577:656::-;16864:6;16853:9;16846:25;16827:4;16890:42;16980:2;16972:6;16968:15;16963:2;16952:9;16948:18;16941:43;17032:2;17024:6;17020:15;17015:2;17004:9;17000:18;16993:43;;17072:6;17067:2;17056:9;17052:18;17045:34;17116:6;17110:3;17099:9;17095:19;17088:35;17160:3;17154;17143:9;17139:19;17132:32;17181:46;17222:3;17211:9;17207:19;17199:6;17181:46;:::i;:::-;17173:54;16577:656;-1:-1:-1;;;;;;;;16577:656:165:o",
    "linkReferences": {},
    "immutableReferences": {
      "18": [
        {
          "start": 339,
          "length": 32
        },
        {
          "start": 4826,
          "length": 32
        },
        {
          "start": 5564,
          "length": 32
        },
        {
          "start": 5661,
          "length": 32
        },
        {
          "start": 5865,
          "length": 32
        }
      ],
      "42346": [
        {
          "start": 610,
          "length": 32
        },
        {
          "start": 913,
          "length": 32
        },
        {
          "start": 5606,
          "length": 32
        }
      ],
      "44632": [
        {
          "start": 1527,
          "length": 32
        }
      ],
      "44635": [
        {
          "start": 1568,
          "length": 32
        }
      ],
      "44638": [
        {
          "start": 1609,
          "length": 32
        }
      ]
    }
  },
  "methodIdentifiers": {
    "MESSAGE_VERSION()": "3f827a5a",
    "MIN_GAS_CALLDATA_OVERHEAD()": "028f85f7",
    "MIN_GAS_CONSTANT_OVERHEAD()": "7dea7cc3",
    "MIN_GAS_DYNAMIC_OVERHEAD_DENOMINATOR()": "0c568498",
    "MIN_GAS_DYNAMIC_OVERHEAD_NUMERATOR()": "2828d7e8",
    "OTHER_MESSENGER()": "9fce812c",
    "PORTAL()": "0ff754ea",
    "baseGas(bytes,uint32)": "b28ade25",
    "failedMessages(bytes32)": "a4e7f8bd",
    "initialize()": "8129fc1c",
    "messageNonce()": "ecc70428",
    "relayMessage(uint256,address,address,uint256,uint256,bytes)": "d764ad0b",
    "sendMessage(address,bytes,uint32)": "3dbb202b",
    "successfulMessages(bytes32)": "b1b1b209",
    "version()": "54fd4d50",
    "xDomainMessageSender()": "6e296e45"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract MantlePortal\",\"name\":\"_portal\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"msgHash\",\"type\":\"bytes32\"}],\"name\":\"FailedRelayedMessage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"msgHash\",\"type\":\"bytes32\"}],\"name\":\"RelayedMessage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"messageNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"}],\"name\":\"SentMessage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SentMessageExtension1\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MESSAGE_VERSION\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_GAS_CALLDATA_OVERHEAD\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_GAS_CONSTANT_OVERHEAD\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_GAS_DYNAMIC_OVERHEAD_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_GAS_DYNAMIC_OVERHEAD_NUMERATOR\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OTHER_MESSENGER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PORTAL\",\"outputs\":[{\"internalType\":\"contract MantlePortal\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"uint32\",\"name\":\"_minGasLimit\",\"type\":\"uint32\"}],\"name\":\"baseGas\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"failedMessages\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"messageNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"}],\"name\":\"relayMessage\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"uint32\",\"name\":\"_minGasLimit\",\"type\":\"uint32\"}],\"name\":\"sendMessage\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"successfulMessages\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"xDomainMessageSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"custom:proxied\":\"@title L1CrossDomainMessenger\",\"kind\":\"dev\",\"methods\":{\"baseGas(bytes,uint32)\":{\"params\":{\"_message\":\"Message to compute the amount of required gas for.\",\"_minGasLimit\":\"Minimum desired gas limit when message goes to target.\"},\"returns\":{\"_0\":\"Amount of gas required to guarantee message receipt.\"}},\"constructor\":{\"custom:semver\":\"1.1.0\",\"params\":{\"_portal\":\"Address of the MantlePortal contract on this network.\"}},\"messageNonce()\":{\"returns\":{\"_0\":\"Nonce of the next message to be sent, with added message version.\"}},\"relayMessage(uint256,address,address,uint256,uint256,bytes)\":{\"params\":{\"_message\":\"Message to send to the target.\",\"_minGasLimit\":\"Minimum amount of gas that the message can be executed with.\",\"_nonce\":\"Nonce of the message being relayed.\",\"_sender\":\"Address of the user who sent the message.\",\"_target\":\"Address that the message is targeted at.\",\"_value\":\"ETH value to send with the message.\"}},\"sendMessage(address,bytes,uint32)\":{\"params\":{\"_message\":\"Message to trigger the target address with.\",\"_minGasLimit\":\"Minimum gas limit that the message can be executed with.\",\"_target\":\"Target contract or wallet address.\"}},\"version()\":{\"returns\":{\"_0\":\"Semver contract version as a string.\"}},\"xDomainMessageSender()\":{\"returns\":{\"_0\":\"Address of the sender of the currently executing message on the other chain.\"}}},\"version\":1},\"userdoc\":{\"events\":{\"FailedRelayedMessage(bytes32)\":{\"notice\":\"Emitted whenever a message fails to be relayed on this chain.\"},\"RelayedMessage(bytes32)\":{\"notice\":\"Emitted whenever a message is successfully relayed on this chain.\"},\"SentMessage(address,address,bytes,uint256,uint256)\":{\"notice\":\"Emitted whenever a message is sent to the other chain.\"},\"SentMessageExtension1(address,uint256)\":{\"notice\":\"Additional event data to emit, required as of Bedrock. Cannot be merged with the         SentMessage event without breaking the ABI of this contract, this is good enough.\"}},\"kind\":\"user\",\"methods\":{\"MESSAGE_VERSION()\":{\"notice\":\"Current message version identifier.\"},\"MIN_GAS_CALLDATA_OVERHEAD()\":{\"notice\":\"Extra gas added to base gas for each byte of calldata in a message.\"},\"MIN_GAS_CONSTANT_OVERHEAD()\":{\"notice\":\"Constant overhead added to the base gas for a message.\"},\"MIN_GAS_DYNAMIC_OVERHEAD_DENOMINATOR()\":{\"notice\":\"Denominator for dynamic overhead added to the base gas for a message.\"},\"MIN_GAS_DYNAMIC_OVERHEAD_NUMERATOR()\":{\"notice\":\"Numerator for dynamic overhead added to the base gas for a message.\"},\"OTHER_MESSENGER()\":{\"notice\":\"Address of the paired CrossDomainMessenger contract on the other chain.\"},\"PORTAL()\":{\"notice\":\"Address of the MantlePortal.\"},\"baseGas(bytes,uint32)\":{\"notice\":\"Computes the amount of gas required to guarantee that a given message will be         received on the other chain without running out of gas. Guaranteeing that a message         will not run out of gas is important because this ensures that a message can always         be replayed on the other chain if it fails to execute completely.\"},\"failedMessages(bytes32)\":{\"notice\":\"Mapping of message hashes to a boolean if and only if the message has failed to be         executed at least once. A message will not be present in this mapping if it         successfully executed on the first attempt.\"},\"initialize()\":{\"notice\":\"Initializer.\"},\"messageNonce()\":{\"notice\":\"Retrieves the next message nonce. Message version will be added to the upper two         bytes of the message nonce. Message version allows us to treat messages as having         different structures.\"},\"relayMessage(uint256,address,address,uint256,uint256,bytes)\":{\"notice\":\"Relays a message that was sent by the other CrossDomainMessenger contract. Can only         be executed via cross-chain call from the other messenger OR if the message was         already received once and is currently being replayed.\"},\"sendMessage(address,bytes,uint32)\":{\"notice\":\"Sends a message to some target address on the other chain. Note that if the call         always reverts, then the message will be unrelayable, and any ETH sent will be         permanently locked. The same will occur if the target on the other chain is         considered unsafe (see the _isUnsafeTarget() function).\"},\"successfulMessages(bytes32)\":{\"notice\":\"Mapping of message hashes to boolean receipt values. Note that a message will only         be present in this mapping if it has successfully been relayed on this chain, and         can therefore not be relayed again.\"},\"version()\":{\"notice\":\"Returns the full semver contract version.\"},\"xDomainMessageSender()\":{\"notice\":\"Retrieves the address of the contract or wallet that initiated the currently         executing message on the other chain. Will throw an error if there is no message         currently being executed. Allows the recipient of a call to see who triggered it.\"}},\"notice\":\"The L1CrossDomainMessenger is a message passing interface between L1 and L2 responsible         for sending and receiving data on the L1 side. Users are encouraged to use this         interface instead of interacting with lower-level contracts directly.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/L1/L1CrossDomainMessenger.sol\":\"L1CrossDomainMessenger\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[\":@openzeppelin/=node_modules/@openzeppelin/\",\":@openzeppelin/contracts-upgradeable/=node_modules/@openzeppelin/contracts-upgradeable/\",\":@openzeppelin/contracts/=node_modules/@openzeppelin/contracts/\",\":@rari-capital/=node_modules/@rari-capital/\",\":@rari-capital/solmate/=node_modules/@rari-capital/solmate/\",\":ds-test/=node_modules/ds-test/src/\",\":forge-std/=node_modules/forge-std/src/\"]},\"sources\":{\"contracts/L1/L1CrossDomainMessenger.sol\":{\"keccak256\":\"0x27de6ce0b237f70993cd99399e1d0d2ead91b4d39928e9ed57e9cb266ef1dd15\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://266212ced64456a77498eb512b648d14ff32f50ae155045ce604ba40bdfe50e6\",\"dweb:/ipfs/QmceV6DeDTYaDFjGuaTzmRcSkKQtBpAHYNEriANeYarUx7\"]},\"contracts/L1/L2OutputOracle.sol\":{\"keccak256\":\"0x4d2ba3903b49bd7579d70a6438cf1db4218a3f1241587f485396e0aac9cb4d95\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6d0a74402435300c2f146b3f9d34c0fb3649b88feb60e2218165a0ebcf9c34e5\",\"dweb:/ipfs/QmbLa1PLV81xkfHsEK4HYzzcX4W3zhrXZbDaEjXsptTNby\"]},\"contracts/L1/MantlePortal.sol\":{\"keccak256\":\"0x90d4a0a0e2abe448d56105af7d3be34b6617c9944e077c7966f017bbd0e4556c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f974aae74cd7b843d1d66388c248e275f3cedabcb3bcdf6c970b318fe44153d1\",\"dweb:/ipfs/QmdXHb6aLuogDAQJiWgt29zkFHja4bfv65RRdYRMKKNucb\"]},\"contracts/L1/ResourceMetering.sol\":{\"keccak256\":\"0xdabbb6aac12331e465bf143cf5256f96257c29eda3481341ba171662b164f554\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3bd546ed3f4e4ddcebc59833cb24b70e54613036af96270aa314dfce2cf5008c\",\"dweb:/ipfs/Qme8WabXvuuxMCFiWrjKsXDzjqCmJ1SJyNorvbnWMAXVQj\"]},\"contracts/libraries/Arithmetic.sol\":{\"keccak256\":\"0xc8858039f87e48e6f18c1af8bc0b03e57cfef564acddfd06e4d91e3db7ac5ed6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2fc79af1e844aa6dc1c68067bfe1d359df8d4e9a3e8881afb3bcfcbf68071714\",\"dweb:/ipfs/QmcNC4k8zmvwj4kZizSenTiWbx2DJQPbwqXXLF4iMbkRVD\"]},\"contracts/libraries/Burn.sol\":{\"keccak256\":\"0x54233b226ba6919dc46d438bc790108d8f855001002a1b9c3c37aed7a83e5f3f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4051a4baca357a9191a6c9e3aa1593a17b69dd7915966e23e4cb269e9c1d9ed4\",\"dweb:/ipfs/QmadKjGKvxm53abVHQdsxrXBc8e9jXywu6vvhkAgjsx59J\"]},\"contracts/libraries/Bytes.sol\":{\"keccak256\":\"0x7aca6593fadf438ee9cd090d8fdc8f94a5202a2eb7f764c9a86f207712d87a48\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://aac32157885c5a08bd0bc7dcd5511f66db12bb20d0c263dd7be9f58b91538fc1\",\"dweb:/ipfs/Qmb1iG11Z53yt9wNbGsuTvoydJXFosDDpWwRSADKyqiCjw\"]},\"contracts/libraries/Constants.sol\":{\"keccak256\":\"0x09a0d1616d822d77142123e6d1262be7ee71ee840e6022f75a4aa0c508659a99\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7bfbb81c230c0032a4d1c3e37b32708e82523c53b7b3b0df5558335c5c0949ee\",\"dweb:/ipfs/QmcRoHQTRxEbbngT1o9yPC5FfQiqqH8P1nTAB7RzgQbKVj\"]},\"contracts/libraries/Encoding.sol\":{\"keccak256\":\"0x341bfb4dd8b2edde503761b616c9c0cab8610bf39e5891a3128d5407ff71c018\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://27235becbd89ee303dd0b2c5489d73430371b31c8bfc62c303a5bc7f4318198b\",\"dweb:/ipfs/QmZyuPiDmXin8HHYN5BvfK76EHRPVUSehB1Sd8STpscDMM\"]},\"contracts/libraries/Hashing.sol\":{\"keccak256\":\"0x72f50fa349759f9dba30784c77cae2682ec441773f209e569d6810ebc634251c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://12651105767d692acd425c573bc4c22ec798a0052e00244d82b47ba4a20b44c0\",\"dweb:/ipfs/QmQF7XM8cWRkBhWRbj11Mkrd1s5YdGYdUjTMkitRBahP6X\"]},\"contracts/libraries/Predeploys.sol\":{\"keccak256\":\"0x7e3206b5b47978d7fab230fc46c3a868466ecb4744feeee9aaff159de1e4c605\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c74edb3e68a84a4acc96ce3981ada0c9c7768d6c8d40e783b3b0d41a53e7f041\",\"dweb:/ipfs/QmcbhLFHv9ZgqsCpDUU18oYevrqynJjnp3cqJ1h9MR8y6K\"]},\"contracts/libraries/SafeCall.sol\":{\"keccak256\":\"0xbb0621c028c18e9d5a54cf1a8136cf2e77f161de48aeb8d911e230f6b280c9ed\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://924ecc629c7642bc19e2f8a390f1b946d22862c8889453da681b5bc1a45d7703\",\"dweb:/ipfs/QmbNknQ8pzssXDXGVjXxzZ8zh1YnNCWtRJVepiM1TnqoqQ\"]},\"contracts/libraries/Types.sol\":{\"keccak256\":\"0x54edbe0a15a54574fb24f32ac58afc6d991f017611438ee450cf459f947b041a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7c767f758b6575481dd9aebc8727d7b2521aa032979f34bf581c72fe71d3a3ef\",\"dweb:/ipfs/QmRURQkgaSi9LAqEwnunHsdmmn3ScNuGwfK9W4J5mw3uMF\"]},\"contracts/libraries/rlp/RLPReader.sol\":{\"keccak256\":\"0x50763c897f0fe84cb067985ec4d7c5721ce9004a69cf0327f96f8982ee8ca412\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://603af847b43933b075f9aac3a7b3cd65041ffe6d732826695458ca9575e1a809\",\"dweb:/ipfs/QmfByFEaCxT9y1VtqoLi5EsXZ9ihkPfj6g5x7pcPoQ7q2K\"]},\"contracts/libraries/rlp/RLPWriter.sol\":{\"keccak256\":\"0x5aa9d21c5b41c9786f23153f819d561ae809a1d55c7b0d423dfeafdfbacedc78\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://921c44e6a0982b9a4011900fda1bda2c06b7a85894967de98b407a83fe9f90c0\",\"dweb:/ipfs/QmSsHLKDUQ82kpKdqB6VntVGKuPDb4W9VdotsubuqWBzio\"]},\"contracts/libraries/trie/MerkleTrie.sol\":{\"keccak256\":\"0xd27fc945d6dd2821636d840f3766f817823c8e9fbfdb87c2da7c73e4292d2f7f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://497cec37d09ebcdc8d1cccac608a4a0b9b9d83eac6cc7c9e8b73c4c6644e2209\",\"dweb:/ipfs/QmUYMsCcgU6epspvKV9Y6anHyyMb4hd1xVzUZheBY9mfG7\"]},\"contracts/libraries/trie/SecureMerkleTrie.sol\":{\"keccak256\":\"0x61b03a03779cb1f75cea3b88af16fdfd10629029b4b2d6be5238e71af8ef1b5f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1212951af291c0e033a7119b42de5cad6b6bf32da26777da7c2419e76fa8f314\",\"dweb:/ipfs/QmYbnifDmL6UkP9D1X9GaNLR1Q8wYwmDNeYqkJ71bycaE5\"]},\"contracts/universal/CrossDomainMessenger.sol\":{\"keccak256\":\"0x3d8194c9e05aea4a9cefa1833ab4f3e95749b685ccf9a04719d235cac2fa3774\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c0043e95acd7c29de3836e98cdcc4292eef201e3ebfab2d768bcfe47f800df8d\",\"dweb:/ipfs/QmTZNQVBdodruQ2x38nhERY9DFjU9oEFU21j5Atf7HUi3U\"]},\"contracts/universal/Semver.sol\":{\"keccak256\":\"0x400059d3edb9efc9c23e6fbc18de6710f9235a4ffba4ab23bdb9f825273f093b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9baf7797439c0ae6512f4639dfc6a1934dbd4e4d7cbb8e63e99264ff47682c9e\",\"dweb:/ipfs/QmawAuhppPyeoZH3rC1uh87xDELa9Lyfw5pYsBqE8myE1m\"]},\"contracts/vendor/AddressAliasHelper.sol\":{\"keccak256\":\"0x6ecb83b4ec80fbe49c22f4f95d90482de64660ef5d422a19f4d4b04df31c1237\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://1d0885be6e473962f9a0622176a22300165ac0cc1a1d7f2e22b11c3d656ace88\",\"dweb:/ipfs/QmPRa3KmRpXW5P9ykveKRDgYN5zYo4cYLAYSnoqHX3KnXR\"]},\"node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6eb2fd1e9894dbe778f4b8131adecebe570689e63cf892f4e21257bfe1252497\",\"dweb:/ipfs/QmXgUGNfZvrn6N2miv3nooSs7Jm34A41qz94fu2GtDFcx8\"]},\"node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9b4b2110b7f2b3eb32951bc08046fa90feccffa594e1176cb91cdfb0e94726b4\",\"dweb:/ipfs/QmSxLwYjicf9zWFuieRc8WQwE4FisA1Um5jp1iSa731TGt\"]},\"node_modules/@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x2a21b14ff90012878752f230d3ffd5c3405e5938d06c97a7d89c0a64561d0d66\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3313a8f9bb1f9476857c9050067b31982bf2140b83d84f3bc0cec1f62bbe947f\",\"dweb:/ipfs/Qma17Pk8NRe7aB4UD3jjVxk7nSFaov3eQyv86hcyqkwJRV\"]},\"node_modules/@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://35c47bece3c03caaa07fab37dd2bb3413bfbca20db7bd9895024390e0a469487\",\"dweb:/ipfs/QmPGWT2x3QHcKxqe6gRmAkdakhbaRgx3DLzcakHz5M4eXG\"]},\"node_modules/@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6f2cf1c531122bc7ca96b8c8db6a60deae60441e5223065e792553d4849b5638\",\"dweb:/ipfs/QmPBdJmBBABMDCfyDjCbdxgiqRavgiSL88SYPGibgbPas9\"]},\"node_modules/@openzeppelin/contracts/utils/math/Math.sol\":{\"keccak256\":\"0xd15c3e400531f00203839159b2b8e7209c5158b35618f570c695b7e47f12e9f0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b600b852e0597aa69989cc263111f02097e2827edc1bdc70306303e3af5e9929\",\"dweb:/ipfs/QmU4WfM28A1nDqghuuGeFmN3CnVrk6opWtiF65K4vhFPeC\"]},\"node_modules/@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"keccak256\":\"0xb3ebde1c8d27576db912d87c3560dab14adfb9cd001be95890ec4ba035e652e7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a709421c4f5d4677db8216055d2d4dac96a613efdb08178a9f7041f0c5cef689\",\"dweb:/ipfs/QmYs2rStvVLDnSJs8HgaMD1ABwoKKWdiVbQyNfLfFWTjTy\"]},\"node_modules/@rari-capital/solmate/src/utils/FixedPointMathLib.sol\":{\"keccak256\":\"0x622fcd8a49e132df5ec7651cc6ae3aaf0cf59bdcd67a9a804a1b9e2485113b7d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://af77088eb606427d4c55e578984a615779c86bc30646a20f7bb27299ba390f7c\",\"dweb:/ipfs/QmZGQdhdQDtHc7gZXWrKXgA3govc74X8U63BiWhPQK3mK8\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.15+commit.e14f2714"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "contract MantlePortal",
              "name": "_portal",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "msgHash",
              "type": "bytes32",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "FailedRelayedMessage",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint8",
              "name": "version",
              "type": "uint8",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "Initialized",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "msgHash",
              "type": "bytes32",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "RelayedMessage",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "sender",
              "type": "address",
              "indexed": false
            },
            {
              "internalType": "bytes",
              "name": "message",
              "type": "bytes",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "messageNonce",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "gasLimit",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "SentMessage",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "SentMessageExtension1",
          "anonymous": false
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "MESSAGE_VERSION",
          "outputs": [
            {
              "internalType": "uint16",
              "name": "",
              "type": "uint16"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "MIN_GAS_CALLDATA_OVERHEAD",
          "outputs": [
            {
              "internalType": "uint64",
              "name": "",
              "type": "uint64"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "MIN_GAS_CONSTANT_OVERHEAD",
          "outputs": [
            {
              "internalType": "uint64",
              "name": "",
              "type": "uint64"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "MIN_GAS_DYNAMIC_OVERHEAD_DENOMINATOR",
          "outputs": [
            {
              "internalType": "uint64",
              "name": "",
              "type": "uint64"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "MIN_GAS_DYNAMIC_OVERHEAD_NUMERATOR",
          "outputs": [
            {
              "internalType": "uint64",
              "name": "",
              "type": "uint64"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "OTHER_MESSENGER",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "PORTAL",
          "outputs": [
            {
              "internalType": "contract MantlePortal",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "_message",
              "type": "bytes"
            },
            {
              "internalType": "uint32",
              "name": "_minGasLimit",
              "type": "uint32"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "baseGas",
          "outputs": [
            {
              "internalType": "uint64",
              "name": "",
              "type": "uint64"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "failedMessages",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "initialize"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "messageNonce",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_nonce",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "_sender",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_target",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_value",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_minGasLimit",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "_message",
              "type": "bytes"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "relayMessage"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_target",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "_message",
              "type": "bytes"
            },
            {
              "internalType": "uint32",
              "name": "_minGasLimit",
              "type": "uint32"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "sendMessage"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "successfulMessages",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "version",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "xDomainMessageSender",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "baseGas(bytes,uint32)": {
            "params": {
              "_message": "Message to compute the amount of required gas for.",
              "_minGasLimit": "Minimum desired gas limit when message goes to target."
            },
            "returns": {
              "_0": "Amount of gas required to guarantee message receipt."
            }
          },
          "constructor": {
            "custom:semver": "1.1.0",
            "params": {
              "_portal": "Address of the MantlePortal contract on this network."
            }
          },
          "messageNonce()": {
            "returns": {
              "_0": "Nonce of the next message to be sent, with added message version."
            }
          },
          "relayMessage(uint256,address,address,uint256,uint256,bytes)": {
            "params": {
              "_message": "Message to send to the target.",
              "_minGasLimit": "Minimum amount of gas that the message can be executed with.",
              "_nonce": "Nonce of the message being relayed.",
              "_sender": "Address of the user who sent the message.",
              "_target": "Address that the message is targeted at.",
              "_value": "ETH value to send with the message."
            }
          },
          "sendMessage(address,bytes,uint32)": {
            "params": {
              "_message": "Message to trigger the target address with.",
              "_minGasLimit": "Minimum gas limit that the message can be executed with.",
              "_target": "Target contract or wallet address."
            }
          },
          "version()": {
            "returns": {
              "_0": "Semver contract version as a string."
            }
          },
          "xDomainMessageSender()": {
            "returns": {
              "_0": "Address of the sender of the currently executing message on the other chain."
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "MESSAGE_VERSION()": {
            "notice": "Current message version identifier."
          },
          "MIN_GAS_CALLDATA_OVERHEAD()": {
            "notice": "Extra gas added to base gas for each byte of calldata in a message."
          },
          "MIN_GAS_CONSTANT_OVERHEAD()": {
            "notice": "Constant overhead added to the base gas for a message."
          },
          "MIN_GAS_DYNAMIC_OVERHEAD_DENOMINATOR()": {
            "notice": "Denominator for dynamic overhead added to the base gas for a message."
          },
          "MIN_GAS_DYNAMIC_OVERHEAD_NUMERATOR()": {
            "notice": "Numerator for dynamic overhead added to the base gas for a message."
          },
          "OTHER_MESSENGER()": {
            "notice": "Address of the paired CrossDomainMessenger contract on the other chain."
          },
          "PORTAL()": {
            "notice": "Address of the MantlePortal."
          },
          "baseGas(bytes,uint32)": {
            "notice": "Computes the amount of gas required to guarantee that a given message will be         received on the other chain without running out of gas. Guaranteeing that a message         will not run out of gas is important because this ensures that a message can always         be replayed on the other chain if it fails to execute completely."
          },
          "failedMessages(bytes32)": {
            "notice": "Mapping of message hashes to a boolean if and only if the message has failed to be         executed at least once. A message will not be present in this mapping if it         successfully executed on the first attempt."
          },
          "initialize()": {
            "notice": "Initializer."
          },
          "messageNonce()": {
            "notice": "Retrieves the next message nonce. Message version will be added to the upper two         bytes of the message nonce. Message version allows us to treat messages as having         different structures."
          },
          "relayMessage(uint256,address,address,uint256,uint256,bytes)": {
            "notice": "Relays a message that was sent by the other CrossDomainMessenger contract. Can only         be executed via cross-chain call from the other messenger OR if the message was         already received once and is currently being replayed."
          },
          "sendMessage(address,bytes,uint32)": {
            "notice": "Sends a message to some target address on the other chain. Note that if the call         always reverts, then the message will be unrelayable, and any ETH sent will be         permanently locked. The same will occur if the target on the other chain is         considered unsafe (see the _isUnsafeTarget() function)."
          },
          "successfulMessages(bytes32)": {
            "notice": "Mapping of message hashes to boolean receipt values. Note that a message will only         be present in this mapping if it has successfully been relayed on this chain, and         can therefore not be relayed again."
          },
          "version()": {
            "notice": "Returns the full semver contract version."
          },
          "xDomainMessageSender()": {
            "notice": "Retrieves the address of the contract or wallet that initiated the currently         executing message on the other chain. Will throw an error if there is no message         currently being executed. Allows the recipient of a call to see who triggered it."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        ":@openzeppelin/=node_modules/@openzeppelin/",
        ":@openzeppelin/contracts-upgradeable/=node_modules/@openzeppelin/contracts-upgradeable/",
        ":@openzeppelin/contracts/=node_modules/@openzeppelin/contracts/",
        ":@rari-capital/=node_modules/@rari-capital/",
        ":@rari-capital/solmate/=node_modules/@rari-capital/solmate/",
        ":ds-test/=node_modules/ds-test/src/",
        ":forge-std/=node_modules/forge-std/src/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 999999
      },
      "metadata": {
        "bytecodeHash": "none"
      },
      "compilationTarget": {
        "contracts/L1/L1CrossDomainMessenger.sol": "L1CrossDomainMessenger"
      },
      "libraries": {}
    },
    "sources": {
      "contracts/L1/L1CrossDomainMessenger.sol": {
        "keccak256": "0x27de6ce0b237f70993cd99399e1d0d2ead91b4d39928e9ed57e9cb266ef1dd15",
        "urls": [
          "bzz-raw://266212ced64456a77498eb512b648d14ff32f50ae155045ce604ba40bdfe50e6",
          "dweb:/ipfs/QmceV6DeDTYaDFjGuaTzmRcSkKQtBpAHYNEriANeYarUx7"
        ],
        "license": "MIT"
      },
      "contracts/L1/L2OutputOracle.sol": {
        "keccak256": "0x4d2ba3903b49bd7579d70a6438cf1db4218a3f1241587f485396e0aac9cb4d95",
        "urls": [
          "bzz-raw://6d0a74402435300c2f146b3f9d34c0fb3649b88feb60e2218165a0ebcf9c34e5",
          "dweb:/ipfs/QmbLa1PLV81xkfHsEK4HYzzcX4W3zhrXZbDaEjXsptTNby"
        ],
        "license": "MIT"
      },
      "contracts/L1/MantlePortal.sol": {
        "keccak256": "0x90d4a0a0e2abe448d56105af7d3be34b6617c9944e077c7966f017bbd0e4556c",
        "urls": [
          "bzz-raw://f974aae74cd7b843d1d66388c248e275f3cedabcb3bcdf6c970b318fe44153d1",
          "dweb:/ipfs/QmdXHb6aLuogDAQJiWgt29zkFHja4bfv65RRdYRMKKNucb"
        ],
        "license": "MIT"
      },
      "contracts/L1/ResourceMetering.sol": {
        "keccak256": "0xdabbb6aac12331e465bf143cf5256f96257c29eda3481341ba171662b164f554",
        "urls": [
          "bzz-raw://3bd546ed3f4e4ddcebc59833cb24b70e54613036af96270aa314dfce2cf5008c",
          "dweb:/ipfs/Qme8WabXvuuxMCFiWrjKsXDzjqCmJ1SJyNorvbnWMAXVQj"
        ],
        "license": "MIT"
      },
      "contracts/libraries/Arithmetic.sol": {
        "keccak256": "0xc8858039f87e48e6f18c1af8bc0b03e57cfef564acddfd06e4d91e3db7ac5ed6",
        "urls": [
          "bzz-raw://2fc79af1e844aa6dc1c68067bfe1d359df8d4e9a3e8881afb3bcfcbf68071714",
          "dweb:/ipfs/QmcNC4k8zmvwj4kZizSenTiWbx2DJQPbwqXXLF4iMbkRVD"
        ],
        "license": "MIT"
      },
      "contracts/libraries/Burn.sol": {
        "keccak256": "0x54233b226ba6919dc46d438bc790108d8f855001002a1b9c3c37aed7a83e5f3f",
        "urls": [
          "bzz-raw://4051a4baca357a9191a6c9e3aa1593a17b69dd7915966e23e4cb269e9c1d9ed4",
          "dweb:/ipfs/QmadKjGKvxm53abVHQdsxrXBc8e9jXywu6vvhkAgjsx59J"
        ],
        "license": "MIT"
      },
      "contracts/libraries/Bytes.sol": {
        "keccak256": "0x7aca6593fadf438ee9cd090d8fdc8f94a5202a2eb7f764c9a86f207712d87a48",
        "urls": [
          "bzz-raw://aac32157885c5a08bd0bc7dcd5511f66db12bb20d0c263dd7be9f58b91538fc1",
          "dweb:/ipfs/Qmb1iG11Z53yt9wNbGsuTvoydJXFosDDpWwRSADKyqiCjw"
        ],
        "license": "MIT"
      },
      "contracts/libraries/Constants.sol": {
        "keccak256": "0x09a0d1616d822d77142123e6d1262be7ee71ee840e6022f75a4aa0c508659a99",
        "urls": [
          "bzz-raw://7bfbb81c230c0032a4d1c3e37b32708e82523c53b7b3b0df5558335c5c0949ee",
          "dweb:/ipfs/QmcRoHQTRxEbbngT1o9yPC5FfQiqqH8P1nTAB7RzgQbKVj"
        ],
        "license": "MIT"
      },
      "contracts/libraries/Encoding.sol": {
        "keccak256": "0x341bfb4dd8b2edde503761b616c9c0cab8610bf39e5891a3128d5407ff71c018",
        "urls": [
          "bzz-raw://27235becbd89ee303dd0b2c5489d73430371b31c8bfc62c303a5bc7f4318198b",
          "dweb:/ipfs/QmZyuPiDmXin8HHYN5BvfK76EHRPVUSehB1Sd8STpscDMM"
        ],
        "license": "MIT"
      },
      "contracts/libraries/Hashing.sol": {
        "keccak256": "0x72f50fa349759f9dba30784c77cae2682ec441773f209e569d6810ebc634251c",
        "urls": [
          "bzz-raw://12651105767d692acd425c573bc4c22ec798a0052e00244d82b47ba4a20b44c0",
          "dweb:/ipfs/QmQF7XM8cWRkBhWRbj11Mkrd1s5YdGYdUjTMkitRBahP6X"
        ],
        "license": "MIT"
      },
      "contracts/libraries/Predeploys.sol": {
        "keccak256": "0x7e3206b5b47978d7fab230fc46c3a868466ecb4744feeee9aaff159de1e4c605",
        "urls": [
          "bzz-raw://c74edb3e68a84a4acc96ce3981ada0c9c7768d6c8d40e783b3b0d41a53e7f041",
          "dweb:/ipfs/QmcbhLFHv9ZgqsCpDUU18oYevrqynJjnp3cqJ1h9MR8y6K"
        ],
        "license": "MIT"
      },
      "contracts/libraries/SafeCall.sol": {
        "keccak256": "0xbb0621c028c18e9d5a54cf1a8136cf2e77f161de48aeb8d911e230f6b280c9ed",
        "urls": [
          "bzz-raw://924ecc629c7642bc19e2f8a390f1b946d22862c8889453da681b5bc1a45d7703",
          "dweb:/ipfs/QmbNknQ8pzssXDXGVjXxzZ8zh1YnNCWtRJVepiM1TnqoqQ"
        ],
        "license": "MIT"
      },
      "contracts/libraries/Types.sol": {
        "keccak256": "0x54edbe0a15a54574fb24f32ac58afc6d991f017611438ee450cf459f947b041a",
        "urls": [
          "bzz-raw://7c767f758b6575481dd9aebc8727d7b2521aa032979f34bf581c72fe71d3a3ef",
          "dweb:/ipfs/QmRURQkgaSi9LAqEwnunHsdmmn3ScNuGwfK9W4J5mw3uMF"
        ],
        "license": "MIT"
      },
      "contracts/libraries/rlp/RLPReader.sol": {
        "keccak256": "0x50763c897f0fe84cb067985ec4d7c5721ce9004a69cf0327f96f8982ee8ca412",
        "urls": [
          "bzz-raw://603af847b43933b075f9aac3a7b3cd65041ffe6d732826695458ca9575e1a809",
          "dweb:/ipfs/QmfByFEaCxT9y1VtqoLi5EsXZ9ihkPfj6g5x7pcPoQ7q2K"
        ],
        "license": "MIT"
      },
      "contracts/libraries/rlp/RLPWriter.sol": {
        "keccak256": "0x5aa9d21c5b41c9786f23153f819d561ae809a1d55c7b0d423dfeafdfbacedc78",
        "urls": [
          "bzz-raw://921c44e6a0982b9a4011900fda1bda2c06b7a85894967de98b407a83fe9f90c0",
          "dweb:/ipfs/QmSsHLKDUQ82kpKdqB6VntVGKuPDb4W9VdotsubuqWBzio"
        ],
        "license": "MIT"
      },
      "contracts/libraries/trie/MerkleTrie.sol": {
        "keccak256": "0xd27fc945d6dd2821636d840f3766f817823c8e9fbfdb87c2da7c73e4292d2f7f",
        "urls": [
          "bzz-raw://497cec37d09ebcdc8d1cccac608a4a0b9b9d83eac6cc7c9e8b73c4c6644e2209",
          "dweb:/ipfs/QmUYMsCcgU6epspvKV9Y6anHyyMb4hd1xVzUZheBY9mfG7"
        ],
        "license": "MIT"
      },
      "contracts/libraries/trie/SecureMerkleTrie.sol": {
        "keccak256": "0x61b03a03779cb1f75cea3b88af16fdfd10629029b4b2d6be5238e71af8ef1b5f",
        "urls": [
          "bzz-raw://1212951af291c0e033a7119b42de5cad6b6bf32da26777da7c2419e76fa8f314",
          "dweb:/ipfs/QmYbnifDmL6UkP9D1X9GaNLR1Q8wYwmDNeYqkJ71bycaE5"
        ],
        "license": "MIT"
      },
      "contracts/universal/CrossDomainMessenger.sol": {
        "keccak256": "0x3d8194c9e05aea4a9cefa1833ab4f3e95749b685ccf9a04719d235cac2fa3774",
        "urls": [
          "bzz-raw://c0043e95acd7c29de3836e98cdcc4292eef201e3ebfab2d768bcfe47f800df8d",
          "dweb:/ipfs/QmTZNQVBdodruQ2x38nhERY9DFjU9oEFU21j5Atf7HUi3U"
        ],
        "license": "MIT"
      },
      "contracts/universal/Semver.sol": {
        "keccak256": "0x400059d3edb9efc9c23e6fbc18de6710f9235a4ffba4ab23bdb9f825273f093b",
        "urls": [
          "bzz-raw://9baf7797439c0ae6512f4639dfc6a1934dbd4e4d7cbb8e63e99264ff47682c9e",
          "dweb:/ipfs/QmawAuhppPyeoZH3rC1uh87xDELa9Lyfw5pYsBqE8myE1m"
        ],
        "license": "MIT"
      },
      "contracts/vendor/AddressAliasHelper.sol": {
        "keccak256": "0x6ecb83b4ec80fbe49c22f4f95d90482de64660ef5d422a19f4d4b04df31c1237",
        "urls": [
          "bzz-raw://1d0885be6e473962f9a0622176a22300165ac0cc1a1d7f2e22b11c3d656ace88",
          "dweb:/ipfs/QmPRa3KmRpXW5P9ykveKRDgYN5zYo4cYLAYSnoqHX3KnXR"
        ],
        "license": "Apache-2.0"
      },
      "node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
        "keccak256": "0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e",
        "urls": [
          "bzz-raw://6eb2fd1e9894dbe778f4b8131adecebe570689e63cf892f4e21257bfe1252497",
          "dweb:/ipfs/QmXgUGNfZvrn6N2miv3nooSs7Jm34A41qz94fu2GtDFcx8"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
        "keccak256": "0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3",
        "urls": [
          "bzz-raw://9b4b2110b7f2b3eb32951bc08046fa90feccffa594e1176cb91cdfb0e94726b4",
          "dweb:/ipfs/QmSxLwYjicf9zWFuieRc8WQwE4FisA1Um5jp1iSa731TGt"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts/proxy/utils/Initializable.sol": {
        "keccak256": "0x2a21b14ff90012878752f230d3ffd5c3405e5938d06c97a7d89c0a64561d0d66",
        "urls": [
          "bzz-raw://3313a8f9bb1f9476857c9050067b31982bf2140b83d84f3bc0cec1f62bbe947f",
          "dweb:/ipfs/Qma17Pk8NRe7aB4UD3jjVxk7nSFaov3eQyv86hcyqkwJRV"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts/utils/Address.sol": {
        "keccak256": "0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10",
        "urls": [
          "bzz-raw://35c47bece3c03caaa07fab37dd2bb3413bfbca20db7bd9895024390e0a469487",
          "dweb:/ipfs/QmPGWT2x3QHcKxqe6gRmAkdakhbaRgx3DLzcakHz5M4eXG"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts/utils/Strings.sol": {
        "keccak256": "0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3",
        "urls": [
          "bzz-raw://6f2cf1c531122bc7ca96b8c8db6a60deae60441e5223065e792553d4849b5638",
          "dweb:/ipfs/QmPBdJmBBABMDCfyDjCbdxgiqRavgiSL88SYPGibgbPas9"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts/utils/math/Math.sol": {
        "keccak256": "0xd15c3e400531f00203839159b2b8e7209c5158b35618f570c695b7e47f12e9f0",
        "urls": [
          "bzz-raw://b600b852e0597aa69989cc263111f02097e2827edc1bdc70306303e3af5e9929",
          "dweb:/ipfs/QmU4WfM28A1nDqghuuGeFmN3CnVrk6opWtiF65K4vhFPeC"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts/utils/math/SignedMath.sol": {
        "keccak256": "0xb3ebde1c8d27576db912d87c3560dab14adfb9cd001be95890ec4ba035e652e7",
        "urls": [
          "bzz-raw://a709421c4f5d4677db8216055d2d4dac96a613efdb08178a9f7041f0c5cef689",
          "dweb:/ipfs/QmYs2rStvVLDnSJs8HgaMD1ABwoKKWdiVbQyNfLfFWTjTy"
        ],
        "license": "MIT"
      },
      "node_modules/@rari-capital/solmate/src/utils/FixedPointMathLib.sol": {
        "keccak256": "0x622fcd8a49e132df5ec7651cc6ae3aaf0cf59bdcd67a9a804a1b9e2485113b7d",
        "urls": [
          "bzz-raw://af77088eb606427d4c55e578984a615779c86bc30646a20f7bb27299ba390f7c",
          "dweb:/ipfs/QmZGQdhdQDtHc7gZXWrKXgA3govc74X8U63BiWhPQK3mK8"
        ],
        "license": "MIT"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 42264,
        "contract": "contracts/L1/L1CrossDomainMessenger.sol:L1CrossDomainMessenger",
        "label": "spacer_0_0_20",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 45590,
        "contract": "contracts/L1/L1CrossDomainMessenger.sol:L1CrossDomainMessenger",
        "label": "_initialized",
        "offset": 20,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 45593,
        "contract": "contracts/L1/L1CrossDomainMessenger.sol:L1CrossDomainMessenger",
        "label": "_initializing",
        "offset": 21,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 42271,
        "contract": "contracts/L1/L1CrossDomainMessenger.sol:L1CrossDomainMessenger",
        "label": "spacer_1_0_1600",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 42274,
        "contract": "contracts/L1/L1CrossDomainMessenger.sol:L1CrossDomainMessenger",
        "label": "spacer_51_0_20",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 42279,
        "contract": "contracts/L1/L1CrossDomainMessenger.sol:L1CrossDomainMessenger",
        "label": "spacer_52_0_1568",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 42282,
        "contract": "contracts/L1/L1CrossDomainMessenger.sol:L1CrossDomainMessenger",
        "label": "spacer_101_0_1",
        "offset": 0,
        "slot": "101",
        "type": "t_bool"
      },
      {
        "astId": 42287,
        "contract": "contracts/L1/L1CrossDomainMessenger.sol:L1CrossDomainMessenger",
        "label": "spacer_102_0_1568",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 42290,
        "contract": "contracts/L1/L1CrossDomainMessenger.sol:L1CrossDomainMessenger",
        "label": "spacer_151_0_32",
        "offset": 0,
        "slot": "151",
        "type": "t_uint256"
      },
      {
        "astId": 42295,
        "contract": "contracts/L1/L1CrossDomainMessenger.sol:L1CrossDomainMessenger",
        "label": "__gap_reentrancy_guard",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 42300,
        "contract": "contracts/L1/L1CrossDomainMessenger.sol:L1CrossDomainMessenger",
        "label": "spacer_201_0_32",
        "offset": 0,
        "slot": "201",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 42305,
        "contract": "contracts/L1/L1CrossDomainMessenger.sol:L1CrossDomainMessenger",
        "label": "spacer_202_0_32",
        "offset": 0,
        "slot": "202",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 42351,
        "contract": "contracts/L1/L1CrossDomainMessenger.sol:L1CrossDomainMessenger",
        "label": "successfulMessages",
        "offset": 0,
        "slot": "203",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 42354,
        "contract": "contracts/L1/L1CrossDomainMessenger.sol:L1CrossDomainMessenger",
        "label": "xDomainMsgSender",
        "offset": 0,
        "slot": "204",
        "type": "t_address"
      },
      {
        "astId": 42357,
        "contract": "contracts/L1/L1CrossDomainMessenger.sol:L1CrossDomainMessenger",
        "label": "msgNonce",
        "offset": 0,
        "slot": "205",
        "type": "t_uint240"
      },
      {
        "astId": 42362,
        "contract": "contracts/L1/L1CrossDomainMessenger.sol:L1CrossDomainMessenger",
        "label": "failedMessages",
        "offset": 0,
        "slot": "206",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 42367,
        "contract": "contracts/L1/L1CrossDomainMessenger.sol:L1CrossDomainMessenger",
        "label": "reentrancyLocks",
        "offset": 0,
        "slot": "207",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 42372,
        "contract": "contracts/L1/L1CrossDomainMessenger.sol:L1CrossDomainMessenger",
        "label": "__gap",
        "offset": 0,
        "slot": "208",
        "type": "t_array(t_uint256)41_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)41_storage": {
        "encoding": "inplace",
        "label": "uint256[41]",
        "numberOfBytes": "1312",
        "base": "t_uint256"
      },
      "t_array(t_uint256)49_storage": {
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568",
        "base": "t_uint256"
      },
      "t_array(t_uint256)50_storage": {
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600",
        "base": "t_uint256"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint240": {
        "encoding": "inplace",
        "label": "uint240",
        "numberOfBytes": "30"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  },
  "userdoc": {
    "version": 1,
    "kind": "user",
    "methods": {
      "MESSAGE_VERSION()": {
        "notice": "Current message version identifier."
      },
      "MIN_GAS_CALLDATA_OVERHEAD()": {
        "notice": "Extra gas added to base gas for each byte of calldata in a message."
      },
      "MIN_GAS_CONSTANT_OVERHEAD()": {
        "notice": "Constant overhead added to the base gas for a message."
      },
      "MIN_GAS_DYNAMIC_OVERHEAD_DENOMINATOR()": {
        "notice": "Denominator for dynamic overhead added to the base gas for a message."
      },
      "MIN_GAS_DYNAMIC_OVERHEAD_NUMERATOR()": {
        "notice": "Numerator for dynamic overhead added to the base gas for a message."
      },
      "OTHER_MESSENGER()": {
        "notice": "Address of the paired CrossDomainMessenger contract on the other chain."
      },
      "PORTAL()": {
        "notice": "Address of the MantlePortal."
      },
      "baseGas(bytes,uint32)": {
        "notice": "Computes the amount of gas required to guarantee that a given message will be         received on the other chain without running out of gas. Guaranteeing that a message         will not run out of gas is important because this ensures that a message can always         be replayed on the other chain if it fails to execute completely."
      },
      "failedMessages(bytes32)": {
        "notice": "Mapping of message hashes to a boolean if and only if the message has failed to be         executed at least once. A message will not be present in this mapping if it         successfully executed on the first attempt."
      },
      "initialize()": {
        "notice": "Initializer."
      },
      "messageNonce()": {
        "notice": "Retrieves the next message nonce. Message version will be added to the upper two         bytes of the message nonce. Message version allows us to treat messages as having         different structures."
      },
      "relayMessage(uint256,address,address,uint256,uint256,bytes)": {
        "notice": "Relays a message that was sent by the other CrossDomainMessenger contract. Can only         be executed via cross-chain call from the other messenger OR if the message was         already received once and is currently being replayed."
      },
      "sendMessage(address,bytes,uint32)": {
        "notice": "Sends a message to some target address on the other chain. Note that if the call         always reverts, then the message will be unrelayable, and any ETH sent will be         permanently locked. The same will occur if the target on the other chain is         considered unsafe (see the _isUnsafeTarget() function)."
      },
      "successfulMessages(bytes32)": {
        "notice": "Mapping of message hashes to boolean receipt values. Note that a message will only         be present in this mapping if it has successfully been relayed on this chain, and         can therefore not be relayed again."
      },
      "version()": {
        "notice": "Returns the full semver contract version."
      },
      "xDomainMessageSender()": {
        "notice": "Retrieves the address of the contract or wallet that initiated the currently         executing message on the other chain. Will throw an error if there is no message         currently being executed. Allows the recipient of a call to see who triggered it."
      }
    },
    "events": {
      "FailedRelayedMessage(bytes32)": {
        "notice": "Emitted whenever a message fails to be relayed on this chain."
      },
      "RelayedMessage(bytes32)": {
        "notice": "Emitted whenever a message is successfully relayed on this chain."
      },
      "SentMessage(address,address,bytes,uint256,uint256)": {
        "notice": "Emitted whenever a message is sent to the other chain."
      },
      "SentMessageExtension1(address,uint256)": {
        "notice": "Additional event data to emit, required as of Bedrock. Cannot be merged with the         SentMessage event without breaking the ABI of this contract, this is good enough."
      }
    },
    "notice": "The L1CrossDomainMessenger is a message passing interface between L1 and L2 responsible         for sending and receiving data on the L1 side. Users are encouraged to use this         interface instead of interacting with lower-level contracts directly."
  },
  "devdoc": {
    "version": 1,
    "kind": "dev",
    "methods": {
      "baseGas(bytes,uint32)": {
        "params": {
          "_message": "Message to compute the amount of required gas for.",
          "_minGasLimit": "Minimum desired gas limit when message goes to target."
        },
        "returns": {
          "_0": "Amount of gas required to guarantee message receipt."
        }
      },
      "constructor": {
        "params": {
          "_portal": "Address of the MantlePortal contract on this network."
        }
      },
      "messageNonce()": {
        "returns": {
          "_0": "Nonce of the next message to be sent, with added message version."
        }
      },
      "relayMessage(uint256,address,address,uint256,uint256,bytes)": {
        "params": {
          "_message": "Message to send to the target.",
          "_minGasLimit": "Minimum amount of gas that the message can be executed with.",
          "_nonce": "Nonce of the message being relayed.",
          "_sender": "Address of the user who sent the message.",
          "_target": "Address that the message is targeted at.",
          "_value": "ETH value to send with the message."
        }
      },
      "sendMessage(address,bytes,uint32)": {
        "params": {
          "_message": "Message to trigger the target address with.",
          "_minGasLimit": "Minimum gas limit that the message can be executed with.",
          "_target": "Target contract or wallet address."
        }
      },
      "version()": {
        "returns": {
          "_0": "Semver contract version as a string."
        }
      },
      "xDomainMessageSender()": {
        "returns": {
          "_0": "Address of the sender of the currently executing message on the other chain."
        }
      }
    }
  },
  "ast": {
    "absolutePath": "contracts/L1/L1CrossDomainMessenger.sol",
    "id": 126,
    "exportedSymbols": {
      "CrossDomainMessenger": [
        42781
      ],
      "L1CrossDomainMessenger": [
        125
      ],
      "MantlePortal": [
        1874
      ],
      "Predeploys": [
        7812
      ],
      "Semver": [
        44690
      ]
    },
    "nodeType": "SourceUnit",
    "src": "32:1964:0",
    "nodes": [
      {
        "id": 1,
        "nodeType": "PragmaDirective",
        "src": "32:23:0",
        "nodes": [],
        "literals": [
          "solidity",
          "0.8",
          ".15"
        ]
      },
      {
        "id": 3,
        "nodeType": "ImportDirective",
        "src": "57:57:0",
        "nodes": [],
        "absolutePath": "contracts/libraries/Predeploys.sol",
        "file": "../libraries/Predeploys.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 126,
        "sourceUnit": 7813,
        "symbolAliases": [
          {
            "foreign": {
              "id": 2,
              "name": "Predeploys",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 7812,
              "src": "66:10:0",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 5,
        "nodeType": "ImportDirective",
        "src": "115:50:0",
        "nodes": [],
        "absolutePath": "contracts/L1/MantlePortal.sol",
        "file": "./MantlePortal.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 126,
        "sourceUnit": 1875,
        "symbolAliases": [
          {
            "foreign": {
              "id": 4,
              "name": "MantlePortal",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 1874,
              "src": "124:12:0",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 7,
        "nodeType": "ImportDirective",
        "src": "166:77:0",
        "nodes": [],
        "absolutePath": "contracts/universal/CrossDomainMessenger.sol",
        "file": "../universal/CrossDomainMessenger.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 126,
        "sourceUnit": 42782,
        "symbolAliases": [
          {
            "foreign": {
              "id": 6,
              "name": "CrossDomainMessenger",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 42781,
              "src": "175:20:0",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 9,
        "nodeType": "ImportDirective",
        "src": "244:49:0",
        "nodes": [],
        "absolutePath": "contracts/universal/Semver.sol",
        "file": "../universal/Semver.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 126,
        "sourceUnit": 44691,
        "symbolAliases": [
          {
            "foreign": {
              "id": 8,
              "name": "Semver",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 44690,
              "src": "253:6:0",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 125,
        "nodeType": "ContractDefinition",
        "src": "626:1369:0",
        "nodes": [
          {
            "id": 18,
            "nodeType": "VariableDeclaration",
            "src": "756:36:0",
            "nodes": [],
            "constant": false,
            "documentation": {
              "id": 15,
              "nodeType": "StructuredDocumentation",
              "src": "696:55:0",
              "text": " @notice Address of the MantlePortal."
            },
            "functionSelector": "0ff754ea",
            "mutability": "immutable",
            "name": "PORTAL",
            "nameLocation": "786:6:0",
            "scope": 125,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_MantlePortal_$1874",
              "typeString": "contract MantlePortal"
            },
            "typeName": {
              "id": 17,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 16,
                "name": "MantlePortal",
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 1874,
                "src": "756:12:0"
              },
              "referencedDeclaration": 1874,
              "src": "756:12:0",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_MantlePortal_$1874",
                "typeString": "contract MantlePortal"
              }
            },
            "visibility": "public"
          },
          {
            "id": 42,
            "nodeType": "FunctionDefinition",
            "src": "926:184:0",
            "nodes": [],
            "body": {
              "id": 41,
              "nodeType": "Block",
              "src": "1055:55:0",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 36,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 34,
                      "name": "PORTAL",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 18,
                      "src": "1065:6:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_MantlePortal_$1874",
                        "typeString": "contract MantlePortal"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 35,
                      "name": "_portal",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 22,
                      "src": "1074:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_MantlePortal_$1874",
                        "typeString": "contract MantlePortal"
                      }
                    },
                    "src": "1065:16:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_MantlePortal_$1874",
                      "typeString": "contract MantlePortal"
                    }
                  },
                  "id": 37,
                  "nodeType": "ExpressionStatement",
                  "src": "1065:16:0"
                },
                {
                  "expression": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 38,
                      "name": "initialize",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 52,
                      "src": "1091:10:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                        "typeString": "function ()"
                      }
                    },
                    "id": 39,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1091:12:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 40,
                  "nodeType": "ExpressionStatement",
                  "src": "1091:12:0"
                }
              ]
            },
            "documentation": {
              "id": 19,
              "nodeType": "StructuredDocumentation",
              "src": "799:122:0",
              "text": " @custom:semver 1.1.0\n @param _portal Address of the MantlePortal contract on this network."
            },
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "hexValue": "31",
                    "id": 25,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "975:1:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_1_by_1",
                      "typeString": "int_const 1"
                    },
                    "value": "1"
                  },
                  {
                    "hexValue": "31",
                    "id": 26,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "978:1:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_1_by_1",
                      "typeString": "int_const 1"
                    },
                    "value": "1"
                  },
                  {
                    "hexValue": "30",
                    "id": 27,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "981:1:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_0_by_1",
                      "typeString": "int_const 0"
                    },
                    "value": "0"
                  }
                ],
                "id": 28,
                "kind": "baseConstructorSpecifier",
                "modifierName": {
                  "id": 24,
                  "name": "Semver",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 44690,
                  "src": "968:6:0"
                },
                "nodeType": "ModifierInvocation",
                "src": "968:15:0"
              },
              {
                "arguments": [
                  {
                    "expression": {
                      "id": 30,
                      "name": "Predeploys",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 7812,
                      "src": "1013:10:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_contract$_Predeploys_$7812_$",
                        "typeString": "type(library Predeploys)"
                      }
                    },
                    "id": 31,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberName": "L2_CROSS_DOMAIN_MESSENGER",
                    "nodeType": "MemberAccess",
                    "referencedDeclaration": 7747,
                    "src": "1013:36:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  }
                ],
                "id": 32,
                "kind": "baseConstructorSpecifier",
                "modifierName": {
                  "id": 29,
                  "name": "CrossDomainMessenger",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 42781,
                  "src": "992:20:0"
                },
                "nodeType": "ModifierInvocation",
                "src": "992:58:0"
              }
            ],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "parameters": {
              "id": 23,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 22,
                  "mutability": "mutable",
                  "name": "_portal",
                  "nameLocation": "951:7:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 42,
                  "src": "938:20:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_MantlePortal_$1874",
                    "typeString": "contract MantlePortal"
                  },
                  "typeName": {
                    "id": 21,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 20,
                      "name": "MantlePortal",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 1874,
                      "src": "938:12:0"
                    },
                    "referencedDeclaration": 1874,
                    "src": "938:12:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_MantlePortal_$1874",
                      "typeString": "contract MantlePortal"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "937:22:0"
            },
            "returnParameters": {
              "id": 33,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1055:0:0"
            },
            "scope": 125,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 52,
            "nodeType": "FunctionDefinition",
            "src": "1160:87:0",
            "nodes": [],
            "body": {
              "id": 51,
              "nodeType": "Block",
              "src": "1201:46:0",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 48,
                      "name": "__CrossDomainMessenger_init",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 42754,
                      "src": "1211:27:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                        "typeString": "function ()"
                      }
                    },
                    "id": 49,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1211:29:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 50,
                  "nodeType": "ExpressionStatement",
                  "src": "1211:29:0"
                }
              ]
            },
            "documentation": {
              "id": 43,
              "nodeType": "StructuredDocumentation",
              "src": "1116:39:0",
              "text": " @notice Initializer."
            },
            "functionSelector": "8129fc1c",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 46,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 45,
                  "name": "initializer",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 45654,
                  "src": "1189:11:0"
                },
                "nodeType": "ModifierInvocation",
                "src": "1189:11:0"
              }
            ],
            "name": "initialize",
            "nameLocation": "1169:10:0",
            "parameters": {
              "id": 44,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1179:2:0"
            },
            "returnParameters": {
              "id": 47,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1201:0:0"
            },
            "scope": 125,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 78,
            "nodeType": "FunctionDefinition",
            "src": "1309:242:0",
            "nodes": [],
            "body": {
              "id": 77,
              "nodeType": "Block",
              "src": "1454:97:0",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 70,
                        "name": "_to",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 55,
                        "src": "1507:3:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 71,
                        "name": "_value",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 59,
                        "src": "1512:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 72,
                        "name": "_gasLimit",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 57,
                        "src": "1520:9:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      },
                      {
                        "hexValue": "66616c7365",
                        "id": 73,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "bool",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1531:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "value": "false"
                      },
                      {
                        "id": 74,
                        "name": "_data",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 61,
                        "src": "1538:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        },
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          },
                          {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        ],
                        "expression": {
                          "id": 65,
                          "name": "PORTAL",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 18,
                          "src": "1464:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_MantlePortal_$1874",
                            "typeString": "contract MantlePortal"
                          }
                        },
                        "id": 67,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "depositTransaction",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 1838,
                        "src": "1464:25:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_external_payable$_t_address_$_t_uint256_$_t_uint64_$_t_bool_$_t_bytes_memory_ptr_$returns$__$",
                          "typeString": "function (address,uint256,uint64,bool,bytes memory) payable external"
                        }
                      },
                      "id": 69,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "names": [
                        "value"
                      ],
                      "nodeType": "FunctionCallOptions",
                      "options": [
                        {
                          "id": 68,
                          "name": "_value",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 59,
                          "src": "1498:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "src": "1464:42:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_payable$_t_address_$_t_uint256_$_t_uint64_$_t_bool_$_t_bytes_memory_ptr_$returns$__$value",
                        "typeString": "function (address,uint256,uint64,bool,bytes memory) payable external"
                      }
                    },
                    "id": 75,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1464:80:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 76,
                  "nodeType": "ExpressionStatement",
                  "src": "1464:80:0"
                }
              ]
            },
            "baseFunctions": [
              42766
            ],
            "documentation": {
              "id": 53,
              "nodeType": "StructuredDocumentation",
              "src": "1253:51:0",
              "text": " @inheritdoc CrossDomainMessenger"
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_sendMessage",
            "nameLocation": "1318:12:0",
            "overrides": {
              "id": 63,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "1445:8:0"
            },
            "parameters": {
              "id": 62,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 55,
                  "mutability": "mutable",
                  "name": "_to",
                  "nameLocation": "1348:3:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 78,
                  "src": "1340:11:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 54,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1340:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 57,
                  "mutability": "mutable",
                  "name": "_gasLimit",
                  "nameLocation": "1368:9:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 78,
                  "src": "1361:16:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint64",
                    "typeString": "uint64"
                  },
                  "typeName": {
                    "id": 56,
                    "name": "uint64",
                    "nodeType": "ElementaryTypeName",
                    "src": "1361:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint64",
                      "typeString": "uint64"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 59,
                  "mutability": "mutable",
                  "name": "_value",
                  "nameLocation": "1395:6:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 78,
                  "src": "1387:14:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 58,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1387:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 61,
                  "mutability": "mutable",
                  "name": "_data",
                  "nameLocation": "1424:5:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 78,
                  "src": "1411:18:0",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 60,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "1411:5:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1330:105:0"
            },
            "returnParameters": {
              "id": 64,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1454:0:0"
            },
            "scope": 125,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "id": 100,
            "nodeType": "FunctionDefinition",
            "src": "1613:160:0",
            "nodes": [],
            "body": {
              "id": 99,
              "nodeType": "Block",
              "src": "1680:93:0",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "id": 97,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "commonType": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "id": 91,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "expression": {
                          "id": 85,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "1697:3:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 86,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "1697:10:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "==",
                      "rightExpression": {
                        "arguments": [
                          {
                            "id": 89,
                            "name": "PORTAL",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 18,
                            "src": "1719:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_MantlePortal_$1874",
                              "typeString": "contract MantlePortal"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_MantlePortal_$1874",
                              "typeString": "contract MantlePortal"
                            }
                          ],
                          "id": 88,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "1711:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 87,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "1711:7:0",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 90,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1711:15:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "src": "1697:29:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "&&",
                    "rightExpression": {
                      "commonType": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "id": 96,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "expression": {
                            "id": 92,
                            "name": "PORTAL",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 18,
                            "src": "1730:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_MantlePortal_$1874",
                              "typeString": "contract MantlePortal"
                            }
                          },
                          "id": 93,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "l2Sender",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 1291,
                          "src": "1730:15:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_external_view$__$returns$_t_address_$",
                            "typeString": "function () view external returns (address)"
                          }
                        },
                        "id": 94,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1730:17:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "==",
                      "rightExpression": {
                        "id": 95,
                        "name": "OTHER_MESSENGER",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 42346,
                        "src": "1751:15:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "src": "1730:36:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "1697:69:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 84,
                  "id": 98,
                  "nodeType": "Return",
                  "src": "1690:76:0"
                }
              ]
            },
            "baseFunctions": [
              42772
            ],
            "documentation": {
              "id": 79,
              "nodeType": "StructuredDocumentation",
              "src": "1557:51:0",
              "text": " @inheritdoc CrossDomainMessenger"
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_isOtherMessenger",
            "nameLocation": "1622:17:0",
            "overrides": {
              "id": 81,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "1656:8:0"
            },
            "parameters": {
              "id": 80,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1639:2:0"
            },
            "returnParameters": {
              "id": 84,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 83,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 100,
                  "src": "1674:4:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 82,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1674:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1673:6:0"
            },
            "scope": 125,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "id": 124,
            "nodeType": "FunctionDefinition",
            "src": "1835:158:0",
            "nodes": [],
            "body": {
              "id": 123,
              "nodeType": "Block",
              "src": "1915:78:0",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "id": 121,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "commonType": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "id": 114,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "id": 109,
                        "name": "_target",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 103,
                        "src": "1932:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "==",
                      "rightExpression": {
                        "arguments": [
                          {
                            "id": 112,
                            "name": "this",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -28,
                            "src": "1951:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_L1CrossDomainMessenger_$125",
                              "typeString": "contract L1CrossDomainMessenger"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_L1CrossDomainMessenger_$125",
                              "typeString": "contract L1CrossDomainMessenger"
                            }
                          ],
                          "id": 111,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "1943:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 110,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "1943:7:0",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 113,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1943:13:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "src": "1932:24:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "||",
                    "rightExpression": {
                      "commonType": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "id": 120,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "id": 115,
                        "name": "_target",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 103,
                        "src": "1960:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "==",
                      "rightExpression": {
                        "arguments": [
                          {
                            "id": 118,
                            "name": "PORTAL",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 18,
                            "src": "1979:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_MantlePortal_$1874",
                              "typeString": "contract MantlePortal"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_MantlePortal_$1874",
                              "typeString": "contract MantlePortal"
                            }
                          ],
                          "id": 117,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "1971:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 116,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "1971:7:0",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 119,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1971:15:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "src": "1960:26:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "1932:54:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 108,
                  "id": 122,
                  "nodeType": "Return",
                  "src": "1925:61:0"
                }
              ]
            },
            "baseFunctions": [
              42780
            ],
            "documentation": {
              "id": 101,
              "nodeType": "StructuredDocumentation",
              "src": "1779:51:0",
              "text": " @inheritdoc CrossDomainMessenger"
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_isUnsafeTarget",
            "nameLocation": "1844:15:0",
            "overrides": {
              "id": 105,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "1891:8:0"
            },
            "parameters": {
              "id": 104,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 103,
                  "mutability": "mutable",
                  "name": "_target",
                  "nameLocation": "1868:7:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 124,
                  "src": "1860:15:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 102,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1860:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1859:17:0"
            },
            "returnParameters": {
              "id": 108,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 107,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 124,
                  "src": "1909:4:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 106,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1909:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1908:6:0"
            },
            "scope": 125,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "internal"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 11,
              "name": "CrossDomainMessenger",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 42781,
              "src": "661:20:0"
            },
            "id": 12,
            "nodeType": "InheritanceSpecifier",
            "src": "661:20:0"
          },
          {
            "baseName": {
              "id": 13,
              "name": "Semver",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 44690,
              "src": "683:6:0"
            },
            "id": 14,
            "nodeType": "InheritanceSpecifier",
            "src": "683:6:0"
          }
        ],
        "canonicalName": "L1CrossDomainMessenger",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 10,
          "nodeType": "StructuredDocumentation",
          "src": "295:330:0",
          "text": " @custom:proxied\n @title L1CrossDomainMessenger\n @notice The L1CrossDomainMessenger is a message passing interface between L1 and L2 responsible\n         for sending and receiving data on the L1 side. Users are encouraged to use this\n         interface instead of interacting with lower-level contracts directly."
        },
        "fullyImplemented": true,
        "linearizedBaseContracts": [
          125,
          44690,
          42781,
          42306,
          45734,
          42265
        ],
        "name": "L1CrossDomainMessenger",
        "nameLocation": "635:22:0",
        "scope": 126,
        "usedErrors": []
      }
    ],
    "license": "MIT"
  },
  "id": 0
}