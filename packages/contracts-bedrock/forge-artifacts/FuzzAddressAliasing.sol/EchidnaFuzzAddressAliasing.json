{
  "abi": [
    {
      "inputs": [],
      "name": "echidna_round_trip_aliasing",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "testRoundTrip",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x608060405234801561001057600080fd5b5060aa8061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c8063206a6a72146037578063cfae1588146052575b600080fd5b60005460ff1615604051901515815260200160405180910390f35b6060605d3660046062565b50565b005b600060208284031215607357600080fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114609657600080fd5b939250505056fea164736f6c634300080f000a",
    "sourceMap": "97:1172:21:-:0;;;;;;;;;;;;;;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x6080604052348015600f57600080fd5b506004361060325760003560e01c8063206a6a72146037578063cfae1588146052575b600080fd5b60005460ff1615604051901515815260200160405180910390f35b6060605d3660046062565b50565b005b600060208284031215607357600080fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114609657600080fd5b939250505056fea164736f6c634300080f000a",
    "sourceMap": "97:1172:21:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1069:198;1129:4;1245:15;;;1244:16;1069:198;;179:14:165;;172:22;154:41;;142:2;127:18;1069:198:21;;;;;;;394:443;;;;;;:::i;:::-;;;;;206:309:165;265:6;318:2;306:9;297:7;293:23;289:32;286:52;;;334:1;331;324:12;286:52;373:9;360:23;423:42;416:5;412:54;405:5;402:65;392:93;;481:1;478;471:12;392:93;504:5;206:309;-1:-1:-1;;;206:309:165:o",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "echidna_round_trip_aliasing()": "206a6a72",
    "testRoundTrip(address)": "cfae1588"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"echidna_round_trip_aliasing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"testRoundTrip\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"echidna_round_trip_aliasing()\":{\"custom:invariant\":\"Address aliases are always able to be undone. Asserts that an address that has been aliased with `applyL1ToL2Alias` can always be unaliased with `undoL1ToL2Alias`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"testRoundTrip(address)\":{\"notice\":\"Takes an address to be aliased with AddressAliasHelper and then unaliased         and updates the test contract's state indicating if the round trip encoding         failed.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/echidna/FuzzAddressAliasing.sol\":\"EchidnaFuzzAddressAliasing\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[\":@openzeppelin/=node_modules/@openzeppelin/\",\":@openzeppelin/contracts-upgradeable/=node_modules/@openzeppelin/contracts-upgradeable/\",\":@openzeppelin/contracts/=node_modules/@openzeppelin/contracts/\",\":@rari-capital/=node_modules/@rari-capital/\",\":@rari-capital/solmate/=node_modules/@rari-capital/solmate/\",\":ds-test/=node_modules/ds-test/src/\",\":forge-std/=node_modules/forge-std/src/\"]},\"sources\":{\"contracts/echidna/FuzzAddressAliasing.sol\":{\"keccak256\":\"0x88109ca3dfc44bbfef64c96cb543ec01872bd45c7a31d13dc28c75f19db0af1d\",\"urls\":[\"bzz-raw://575b4d9d6f816e46f8facf7a794108794b8295b7043fb4fa82c6995e5a7c4717\",\"dweb:/ipfs/Qmaw62pxmG4CbxzHVWm1rDRB3jawk9oFmPJj7tt72qvemn\"]},\"contracts/vendor/AddressAliasHelper.sol\":{\"keccak256\":\"0x6ecb83b4ec80fbe49c22f4f95d90482de64660ef5d422a19f4d4b04df31c1237\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://1d0885be6e473962f9a0622176a22300165ac0cc1a1d7f2e22b11c3d656ace88\",\"dweb:/ipfs/QmPRa3KmRpXW5P9ykveKRDgYN5zYo4cYLAYSnoqHX3KnXR\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.15+commit.e14f2714"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "echidna_round_trip_aliasing",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "testRoundTrip"
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "echidna_round_trip_aliasing()": {
            "custom:invariant": "Address aliases are always able to be undone. Asserts that an address that has been aliased with `applyL1ToL2Alias` can always be unaliased with `undoL1ToL2Alias`."
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "testRoundTrip(address)": {
            "notice": "Takes an address to be aliased with AddressAliasHelper and then unaliased         and updates the test contract's state indicating if the round trip encoding         failed."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        ":@openzeppelin/=node_modules/@openzeppelin/",
        ":@openzeppelin/contracts-upgradeable/=node_modules/@openzeppelin/contracts-upgradeable/",
        ":@openzeppelin/contracts/=node_modules/@openzeppelin/contracts/",
        ":@rari-capital/=node_modules/@rari-capital/",
        ":@rari-capital/solmate/=node_modules/@rari-capital/solmate/",
        ":ds-test/=node_modules/ds-test/src/",
        ":forge-std/=node_modules/forge-std/src/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 999999
      },
      "metadata": {
        "bytecodeHash": "none"
      },
      "compilationTarget": {
        "contracts/echidna/FuzzAddressAliasing.sol": "EchidnaFuzzAddressAliasing"
      },
      "libraries": {}
    },
    "sources": {
      "contracts/echidna/FuzzAddressAliasing.sol": {
        "keccak256": "0x88109ca3dfc44bbfef64c96cb543ec01872bd45c7a31d13dc28c75f19db0af1d",
        "urls": [
          "bzz-raw://575b4d9d6f816e46f8facf7a794108794b8295b7043fb4fa82c6995e5a7c4717",
          "dweb:/ipfs/Qmaw62pxmG4CbxzHVWm1rDRB3jawk9oFmPJj7tt72qvemn"
        ],
        "license": null
      },
      "contracts/vendor/AddressAliasHelper.sol": {
        "keccak256": "0x6ecb83b4ec80fbe49c22f4f95d90482de64660ef5d422a19f4d4b04df31c1237",
        "urls": [
          "bzz-raw://1d0885be6e473962f9a0622176a22300165ac0cc1a1d7f2e22b11c3d656ace88",
          "dweb:/ipfs/QmPRa3KmRpXW5P9ykveKRDgYN5zYo4cYLAYSnoqHX3KnXR"
        ],
        "license": "Apache-2.0"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4817,
        "contract": "contracts/echidna/FuzzAddressAliasing.sol:EchidnaFuzzAddressAliasing",
        "label": "failedRoundtrip",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      }
    }
  },
  "userdoc": {
    "version": 1,
    "kind": "user",
    "methods": {
      "testRoundTrip(address)": {
        "notice": "Takes an address to be aliased with AddressAliasHelper and then unaliased         and updates the test contract's state indicating if the round trip encoding         failed."
      }
    }
  },
  "devdoc": {
    "version": 1,
    "kind": "dev",
    "methods": {
      "echidna_round_trip_aliasing()": {}
    }
  },
  "ast": {
    "absolutePath": "contracts/echidna/FuzzAddressAliasing.sol",
    "id": 4859,
    "exportedSymbols": {
      "AddressAliasHelper": [
        45451
      ],
      "EchidnaFuzzAddressAliasing": [
        4858
      ]
    },
    "nodeType": "SourceUnit",
    "src": "0:1270:21",
    "nodes": [
      {
        "id": 4813,
        "nodeType": "PragmaDirective",
        "src": "0:23:21",
        "nodes": [],
        "literals": [
          "solidity",
          "0.8",
          ".15"
        ]
      },
      {
        "id": 4815,
        "nodeType": "ImportDirective",
        "src": "25:70:21",
        "nodes": [],
        "absolutePath": "contracts/vendor/AddressAliasHelper.sol",
        "file": "../vendor/AddressAliasHelper.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 4859,
        "sourceUnit": 45452,
        "symbolAliases": [
          {
            "foreign": {
              "id": 4814,
              "name": "AddressAliasHelper",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 45451,
              "src": "34:18:21",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 4858,
        "nodeType": "ContractDefinition",
        "src": "97:1172:21",
        "nodes": [
          {
            "id": 4817,
            "nodeType": "VariableDeclaration",
            "src": "139:29:21",
            "nodes": [],
            "constant": false,
            "mutability": "mutable",
            "name": "failedRoundtrip",
            "nameLocation": "153:15:21",
            "scope": 4858,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bool",
              "typeString": "bool"
            },
            "typeName": {
              "id": 4816,
              "name": "bool",
              "nodeType": "ElementaryTypeName",
              "src": "139:4:21",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "visibility": "internal"
          },
          {
            "id": 4847,
            "nodeType": "FunctionDefinition",
            "src": "394:443:21",
            "nodes": [],
            "body": {
              "id": 4846,
              "nodeType": "Block",
              "src": "438:399:21",
              "nodes": [],
              "statements": [
                {
                  "assignments": [
                    4824
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 4824,
                      "mutability": "mutable",
                      "name": "aliasedAddr",
                      "nameLocation": "485:11:21",
                      "nodeType": "VariableDeclaration",
                      "scope": 4846,
                      "src": "477:19:21",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 4823,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "477:7:21",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 4829,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 4827,
                        "name": "addr",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4820,
                        "src": "535:4:21",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "id": 4825,
                        "name": "AddressAliasHelper",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 45451,
                        "src": "499:18:21",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_AddressAliasHelper_$45451_$",
                          "typeString": "type(library AddressAliasHelper)"
                        }
                      },
                      "id": 4826,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "applyL1ToL2Alias",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 45428,
                      "src": "499:35:21",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_address_$returns$_t_address_$",
                        "typeString": "function (address) pure returns (address)"
                      }
                    },
                    "id": 4828,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "499:41:21",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "477:63:21"
                },
                {
                  "assignments": [
                    4831
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 4831,
                      "mutability": "mutable",
                      "name": "undoneAliasAddr",
                      "nameLocation": "590:15:21",
                      "nodeType": "VariableDeclaration",
                      "scope": 4846,
                      "src": "582:23:21",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 4830,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "582:7:21",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 4836,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 4834,
                        "name": "aliasedAddr",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4824,
                        "src": "643:11:21",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "id": 4832,
                        "name": "AddressAliasHelper",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 45451,
                        "src": "608:18:21",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_AddressAliasHelper_$45451_$",
                          "typeString": "type(library AddressAliasHelper)"
                        }
                      },
                      "id": 4833,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "undoL1ToL2Alias",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 45450,
                      "src": "608:34:21",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_address_$returns$_t_address_$",
                        "typeString": "function (address) pure returns (address)"
                      }
                    },
                    "id": 4835,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "608:47:21",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "582:73:21"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 4839,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 4837,
                      "name": "addr",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4820,
                      "src": "759:4:21",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "!=",
                    "rightExpression": {
                      "id": 4838,
                      "name": "undoneAliasAddr",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4831,
                      "src": "767:15:21",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "759:23:21",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 4845,
                  "nodeType": "IfStatement",
                  "src": "755:76:21",
                  "trueBody": {
                    "id": 4844,
                    "nodeType": "Block",
                    "src": "784:47:21",
                    "statements": [
                      {
                        "expression": {
                          "id": 4842,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 4840,
                            "name": "failedRoundtrip",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4817,
                            "src": "798:15:21",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "hexValue": "74727565",
                            "id": 4841,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "bool",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "816:4:21",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "value": "true"
                          },
                          "src": "798:22:21",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 4843,
                        "nodeType": "ExpressionStatement",
                        "src": "798:22:21"
                      }
                    ]
                  }
                }
              ]
            },
            "documentation": {
              "id": 4818,
              "nodeType": "StructuredDocumentation",
              "src": "175:214:21",
              "text": " @notice Takes an address to be aliased with AddressAliasHelper and then unaliased\n         and updates the test contract's state indicating if the round trip encoding\n         failed."
            },
            "functionSelector": "cfae1588",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "testRoundTrip",
            "nameLocation": "403:13:21",
            "parameters": {
              "id": 4821,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4820,
                  "mutability": "mutable",
                  "name": "addr",
                  "nameLocation": "425:4:21",
                  "nodeType": "VariableDeclaration",
                  "scope": 4847,
                  "src": "417:12:21",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4819,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "417:7:21",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "416:14:21"
            },
            "returnParameters": {
              "id": 4822,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "438:0:21"
            },
            "scope": 4858,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 4857,
            "nodeType": "FunctionDefinition",
            "src": "1069:198:21",
            "nodes": [],
            "body": {
              "id": 4856,
              "nodeType": "Block",
              "src": "1135:132:21",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 4854,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "UnaryOperation",
                    "operator": "!",
                    "prefix": true,
                    "src": "1244:16:21",
                    "subExpression": {
                      "id": 4853,
                      "name": "failedRoundtrip",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4817,
                      "src": "1245:15:21",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 4852,
                  "id": 4855,
                  "nodeType": "Return",
                  "src": "1237:23:21"
                }
              ]
            },
            "documentation": {
              "id": 4848,
              "nodeType": "StructuredDocumentation",
              "src": "843:221:21",
              "text": " @custom:invariant Address aliases are always able to be undone.\n Asserts that an address that has been aliased with `applyL1ToL2Alias` can always\n be unaliased with `undoL1ToL2Alias`."
            },
            "functionSelector": "206a6a72",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "echidna_round_trip_aliasing",
            "nameLocation": "1078:27:21",
            "parameters": {
              "id": 4849,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1105:2:21"
            },
            "returnParameters": {
              "id": 4852,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4851,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 4857,
                  "src": "1129:4:21",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 4850,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1129:4:21",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1128:6:21"
            },
            "scope": 4858,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "EchidnaFuzzAddressAliasing",
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "linearizedBaseContracts": [
          4858
        ],
        "name": "EchidnaFuzzAddressAliasing",
        "nameLocation": "106:26:21",
        "scope": 4859,
        "usedErrors": []
      }
    ]
  },
  "id": 21
}